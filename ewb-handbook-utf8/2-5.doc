chapter 5
//i EWBの操作//small{―レイアウトから索引作成まで―//}

  前章では、原稿ファイルの登録やプリンタ出力、X端末を使ったプレビューなどの操作を説明しました。この章では、さらに一歩進んで、図表類の取り込みから索引作成までの操作を見ていきます。

//ii //in203図表類の管理

  “////f”や“////t”といった図表トリガは、図表のキャプションを定義し、本文中から参照するために使われるものです。図表トリガに、実際どんな図表が貼り付けられるのかは、トリガではわかりません。このような物理的な情報をEWBでは、図表の//g{//in204物理属性//}と呼んでいます。
ここでは、この物理属性をどのように扱っていくのかという説明をしていきます。

//iii EWBで扱える図表

  図表をEWBで扱うためには、ファイルになっている必要があります。この中で、EWBが扱える図表ファイルは、//t020501のようになります。
これらの図表ファイルの一部は“ファイル拡張子”によって区別されます。

@@clearpage()
//t020501 EWBで扱える図表ファイル

//iii 物理属性ファイルと物理属性エディタ

  図表の物理属性は、“//in205物理属性ファイル”という原稿ファイルとは別のファイルに記憶します。このファイルは、図表種別の他に、キャプションの位置やページのどの位置に図表を出力するかなどといった図表に関する様々な情報がはいっています。EWBは、原稿ファイルとこの物理属性ファイルの情報に基づいて、図表のはいったページを出力をします（//f020501）。また、この物理属性ファイルは、EWB-Shelfから起動される“//in206物理属性エディタ”という会話式のツールを使って入力や修正を行います。

//f020501 図表トリガと物理属性ファイル

//iii EWB-Shelfで図表を取り込む操作

  簡単なサンプル原稿を使って、図表を取り込んだ出力をしてみましょう。サンプル原稿は次のような例です。

//list2{
chapter 2
////i 接続の手順

////ii　データの伝送

　25ピンのうち、データ転送に使用するのは、つぎの2つだけである。
////c1{
2　送信データ；Transmit Data
3　受信データ；Receive Data
////c1}
　これらは、コンピュータとモデムとで異なった用途に使用されている。RS-232規格では
、DTE（Data Terminal Equipment；データ端末装置）とDCE（Data Com@@break()municati
ons Equipment；データ回線終端装置）の2種類の装置について規定している。コンピュー
タの大半は（すべてではないが）DTEであり、モデムは必ずDCEである。
　DTEでは、2番ピンでデータを送信し、3番ピンで受信する。DCEでは、この逆になる。
　端末やコンピュータをモデムやプリンタに接続する場合（DTE☆DCE）には、////f0201
のように同じ番号のピン同士を////g{ストレート////g}に接続する。

////f0201　DTEとDCEの相互接続（ストレート）

　コンピュータとコンピュータとを接続するには（DTE☆DTE）、2番と3番の線を////g{ク
ロス////g}させなければならない（////f0202）。

////f0202　DTE同士の相互接続（クロス）

　これは、////g{ヌルモデム////g}ケーブルあるいは////g{モデム////g}ケーブルと呼ぶ
ことが多い。
　1番ピンはフレーム（保安用）接地である。コンピュータとモデムを接続する場合はホ
スト側に、また、コンピュータ同士を直に接続する場合はいずれか一方の側にこのピンを
接続し、ケーブルのもう一方の側は接続しないままとするべきである。RS-232の正しい実
装は、ポートの1番ピンをシステムのフレーム内部でアースに接続するというものである
。実際RS-232C規格では、両側とも接続し、モデム内部でブレーク（断線）することにな
っている。RS-232D規格では、上記のように、DTE側だけで接続する。ほとんどすべてのメ
ーカーが信号用接地とフレーム用接地をモデム内部で相互に接続させているが、これは誤
りである。
//}

  この原稿を4章で説明した通りのやり方で、出力します。

//list2{
% //sl{book//}
shelf: 原稿セットが定義されていません
% //sl{book add sample.doc//}
shelf: ワークディレクトリ`Work'が存在しません
shelf: ワークディレクトリを作成しますか? //g{y//}
shelf: ターゲットディレクトリ`Targets'が存在しません
shelf: ターゲットディレクトリを作成しますか? //g{y//}
  # Body       Document file          Page Style file           Options
  1 sample     sample.doc             (*1) -                    tex2
% //sl{sample.OUT//}
debug ' ewb2latex -y -f ../triger.def  -s ../ewb2latex.cls  -P `cat sample.fpg` 
-T idx.tmp -o sample.tex ../sample.doc '
pl-new sample.tex && pl-new sample.tex &&  :
This is pTeX, Version p2.1.9, based on TeX, Version 3.14159 (EUC) (Web2C 7.3.1)
(sample.tex
pLaTeX2e <1996/03/05>+2 (based on LaTeX2e <1996/06/01> patch level 0)
(../ewb2latex.cls
Document Class: ewb2latex 1996/10/31 19:59 Document style for `pssted sample fil
e'
*** make dvi for printer ***
(/usr/local/ewb/3.3/ewbmacros/lib/ewbbase3_3.sty
(/usr/local/ewb/3.3/ewbmacros/lib/cm/OT1cmr.fd)
(/usr/local/ewb/3.3/ewbmacros/lib/cm/OT1cmtt.fd)
(/usr/local/ewb/3.3/ewbmacros/lib/cm/OMLcmm.fd)
  .........省略
(see the transcript file for additional information)
Output written on sample.dvi (2 pages, 2708 bytes).
Transcript written on sample.log.
mv sample.dvi sample.Dvi
/usr/local/ewb/3.3/bin/indexassign -i idx.tmp -o tmp.idx sample.idx && mv tmp.id
x sample.idx 
/usr/local/ewb/3.3/bin/dvips -N0 -mode supre -D2400 -M -O-10mm,0mm -s -o ../Targ
ets/sample.PS ../Targets/sample.Dvi 
This is dvipsk 5.86 p1.5c Copyright 1996-2000 ASCII Corp.(www-ptex@ascii.co.jp)
based on dvipsk 5.86 Copyright 1999 Radical Eye Software (www.radicaleye.com)
' TeX output 2000.12.19:1212' -> ../Targets/sample.PS
dvips: no match for special paper size found; using default
<texc.pro><cmtt9.pfb><cmsy10.pfb><cmex10.pfb><cmmi10.pfb><cmr10.pfb>
<texps.pro><special.pro><color.pro>. [1] [2] 
pspr -Ppslp2 ../Targets/sample.PS 
%
//}

  この例の出力は、//f020502のようになります。この原稿中にある“図2.1”と“図2.2”に対して、MacintoshのIllustratorで作成した//f020503のような図を入れてみることにしましょう。これらの図には、それぞれ“f2-1.eps”と“f2-2.eps”という名前を付けておきます。

//f020502 キャプションのみの出力

//f020503 Illustratorで作成した図

@@clearpage()
//iii 図表の登録

  まず、最初に行うことは、原稿ファイルと同じように図表ファイルを作業ディレクトリにコピーすることです。この時、図表ファイルはサブディレクトリを作って、原稿ファイルと分けて管理した方が効率的です。

//list2{
% //sl{ls//}
Targets         diff.sty        sample.doc
Work            ewb2latex.cls   triger.def
% //sl{mkdir fig//}
% //sl{ls//}
Targets         diff.sty        fig             triger.def
Work            ewb2latex.cls   sample.doc
% //sl{cp ~/lapic/f2-1.lap ~/lapic/f2-2.lap fig//}
% //sl{ls fig//}
f2-1.lap        f2-2.lap
%
//}

  次に、EWB-Shelfに対して「これから図表を取り込みます」という宣言をします。この宣言は次のように行います。

//list2{
% //sl{book//}
  # Body       Document file          Page Style file           Options
  1 sample     sample.doc             (*1) -                    tex2
% //sl{book 1 usephy//}
  # Body       Document file          Page Style file           Options
  1 sample     sample.doc             (*1) -                    usephy tex2
%
//}

  この宣言には、原稿番号を指定します。オプションのところに“//in209usephy”という文字列が付け加わってます。これ以降、本体名が“sample”という原稿に対して、図表を取り込んで出力することになります。

//iii //in207物理属性エディタ“//in208past”の操作

  先ほどの“usephy”という命令は、単純に「図表を使います」という宣言をするだけです。実際にどのような図表を扱うのかは、物理属性ファイルに入力していきます。物理属性ファイルへの入力をはじめるには、本体名に続いて“.phy”と入力します。
では、“sample.phy”と入力してみましょう。

//f020504 物理属性エディタのリスト画面

  画面が一瞬にして切り替わり、//f020504のようになります。この画面のことを“リスト画面”といいます。このリスト画面には、“sample.doc”という原稿から抽出した図表トリガがそれぞれ表示されています。表示されたリストの中で1行が反転していますが、これがリスト画面におけるカーソルとなります。このカーソルは、上下の矢印キーで移動ができます。“f0201”の位置までカーソルを移動し、スペースキーを押すとカーソルの左端に“*”が表示されます。この“*”のことを//g{//in210マーク//}と呼び、マークの付いた項目が着目している項目になります（//f020505）。項目にマークを付けたら、リターンキーを押してください。これで、入力作業のスタートとなります。

//f020505 “*”マークの付いたリスト画面

//f020506 物理属性エディタのメニュー画面

  画面が再び切り替わって、//f020506のようになります。この画面のことを“メニュー画面”と呼びます。メニュー画面は、1つのトリガに対して1つの画面が割り当てられています。画面の上の方には、“原稿ファイル名、トリガ、キャプション”が表示されています。そして、その下に並んでいるのが、//g{//in211入力フィールド//}です。
  まずは、これらの入力フィールドの意味について説明しましょう。

//k1{
//g{図表の実体//}
//|これから扱う図表が“EWB形式のファイルであるのか、EPSファイルなのか、それともアタリ罫を引くのか”ということを指定します。
//|EWB形式のファイルの場合は“ファイル”を選択し、“ファイル名”を入力します。EPSファイルの場合には“EPSファイル”を選択し、“ファイル名”を入力します。このとき縦横のサイズも指定した場合はその大きさで出力します。縦または横のサイズが0の場合は0でない方が有効となり、縦横の比率はそのままで出力します。両方とも0の場合はサイズはそのままで出力します。拡大率を指定するとその拡大率で出力します。縦横のサイズと拡大率では拡大率が優先します。
アタリ罫を引く時には“箱を書く”を選択し、矩形の“縦横サイズ”を指定します。
//g{図表の位置//}
//|図表をページのどこに位置させるかということを指定します。“h（ここ）、t（ページの上）、b（ページの下）、p（別ページ）、これらの組み合せ”のいずれかを選択します。画面には“固定”という項目がありますが、この項目は将来拡張のために用意したもので、現在は選択できないようになっています。なお、体裁入力でページブレーク“有り”を選択した（フロートしない図表）場合は、ここでどんな項目を選択しても影響がありません。
//g{左あき//}
//|図表の左のアキを指定します。“左あき”と“揃え”の関係は、//f020507のようになります。

//f020507 “左あき”と“揃え”の関係

//g{図表の揃え//}
//|図表の揃えを指定します。“左、中、右”の中から選択します。
//g{キャプションとのあき//}
//|図表とキャプションのアキを指定します。通常はトリガの体裁入力を行う時に、一括でこの値を設定できますが、ここで行うアキの指定は、個別に行うものです。
//g{キャプションの位置//}
//|図表に対して、キャプションをどこに置くのかということを指定します。図表の実体に“ファイル”を選択した場合、キャプション位置は上下の左/中/右のみです。左右には指定できません。
//}

  入力フィールドには、文字列を入力するフィールドといくつかの候補から選択するフィールドの2種類があります。入力の方法は、まず上下の矢印キーを使い、入力したいフィールドにカーソルを合わせます。このフィールドが候補から選択するフィールドであれば、左右の矢印キーを使い必要な項目を選択します。また、文字列を入力するフィールドであれば、文字入力をはじめる前にスペースキーを1回押します。文字入力が終ったらリターンキーか下矢印キーを押し、フィールドの内容を確定します。
  では、実際に入力してみましょう。ファイル名には、“fig/f2-1.eps”のように、ディレクトリ名も指定します。さらに、図の位置に“htb”を、図の揃えに“中”を、キャプションの位置に“下中”を指定します（//f020508）。

//f020508 メニュー画面の入力

  入力が終了したら、エスケープキーを2回押しリスト画面に戻ります。先ほど付けた“*”のマークが“+”になっています（//f020509）。この“+”マークは、行の内容に変更があったことを示す印です。この状態で終了キー“q”を押そうとすると、“このまま終了すると変更箇所が失われます（y/n）”と表示されます。この時、“y”を押さなければ、終了しません。

//f020509 “+”マークが付いたリスト

  それでは、引続き次の行にカーソルを移動し、“f0202”も同じように入力してみましょう。入力が終了したらリスト画面に戻り、保存キー“s”を押してください。ここで、画面の下に“../ForAll.phy”と表示されます。これが保存するファイル名です。ここでは、そのままリターンキーを押してください（//f020510）。
  リターンキーを押すと、“+”のマークが消えます。この状態で“q”を押すと終了します。

//f020510 保存中のリスト画面

@@clearpage()
//iii 図表を取り込んだ出力

  物理属性の入力が終ったら、さっそく出力してみましょう。今まで通りに、“sample.out”と入力すると図のはいった出力が得られます（//f020511）。

//f020511 図を取り込んだ出力

//iii //in212アタリ罫の出力

  編集中にまだ図版ができていない場合があります。そのような場合、図の大きさのアタリ罫だけでも出力しておくとレイアウトがわかりやすくなります。
  例として、横30mm、縦30mmのアタリ罫を出力してみましょう。“sample.phy”と入力し、“f0202”を選択して、//f020512のように入力します。さらに、キャプションの位置を“右下”にしてみます。それでは、この設定で、もう一度出力してみましょう（//f020513）。

//f020512 アタリ罫の指定

//f020513 アタリ罫の出力

//ii //in213レイアウト修正

  図表の読み込み出力を行って、このままで版下が得られれば大変に楽なのですが、あともう少しだけ、作業が残っています。第1部の基礎編で説明したように、組版に関連した作業は、すべてEWBシステムが処理してくれます。しかし、コンピュータが美しいと考えて組んだページイメージが、必ずしも読みやすく、きれいに見えるとは限りません。このため、出力を見て満足がいかない部分に関しては、修正を加える必要があります。このことを“レイアウト修正”と呼んでいます。
  ここでは、“図表の移動”と“組版トリガ”を使った位置調整の説明をします。これが済めば、すぐに入稿ですのでがんばりましょう。なお、この作業は、必ず原稿が完全にフィックスしてから行ってください。

//iii 図表の移動

  図表には、“//in214フロートしないもの”と“フロートするもの”があります。この指定は体裁入力を行う時に、トリガ別に決められるものです。フロートしない図表は、原稿中で指定された位置に出力され、そのページに収まらない場合は、本文と同様に適切な位置で改ページされます。一方、フロートする図表は、改ページされずにEWBが考えた最適な位置に出力されます。しかし、コンピュータは原稿の内容まで考えて処理を行っているわけではないので、常に最適な位置に図表を配置するとは限りません。そこで、満足のいかない図表に関しては、改めて位置指定や調整をしなければなりません。
  このような図表を移動させるには、次の4つの方法があげられます。これらの方法は1でだめなら2、2でもだめなら3といったように順番に試してください。

//k1{
1.//|“phy”による図表位置の変更
2.//|図表トリガの位置を変える
3.//|本文中のアキを調整する
4.//|図表の大きさを変える
//}

  いずれの方法を選択するにしても、前ページのレイアウト変更が後のページに影響するので、図表の移動は先頭の図表から順番に行ってください。
では、これらの方法について詳しく見ていくことにしましょう。

//iii “phy”による図表位置の変更

  以前に説明したように、物理属性ファイルで指定できる図表の位置指定は、次の4種類です。

//table{
//g{指定//}	//g{意味//}
here	ここ
top	ページの先頭
bottom	ページの終り
page	1ページに図表類だけ
//}

  これらをそれぞれ単独で指定して、図表が指定した位置にはいらなかった場合には、置く場所がないため、その図表は最終ページに移動してしまいます。さらにその影響で、それに続くすべての図表が最終ページに集められてしまう仕掛けになっています。このため、最初に行う物理属性ファイルの位置指定は、必ず“組み合せ”を選択してください。これが一番効率の上がる方法です。まずは、この指定で出力してみて、満足のいかない図表に対して、先頭の図表から順番に、再度、位置指定を行ってください。

//iii 図表トリガの位置を変える

  たとえば、どうしてもそのページに入れたい図表が、次のページに出力されてしまう場合などに有効な方法です。原稿中の図表トリガの入力位置を、前ページに出力された文書の中に移動し、図表の位置指定を“top”あるいは“bottom”にします。ただし、見出しを越えて移動してしまうと、図表のナンバリングに影響してしまう場合があるので注意が必要です。

//iii 本文中のアキを調整する

  ほんの数mmぐらい本文中のスペースが足りなくて、図表がはいらない場合などに、見出しや箇条書などの前後のアキを調整して、図表を入れてしまう方法です。この調整には、縦方向のスペースを調整する“組版トリガ”を使って行います。

//iii 図表の大きさを変える

  本文中にアキを調整する場所がない場合などに、図表自体の大きさを調整してしまいます。アタリ罫を引いている場合には、アタリ罫の縦の長さを少し小さくし、ファイルを読み込んでいる場合には、図表自体の前後のアキを調整します。しかし、この方法はあまりお勧めできません。

//iii 組版トリガによるレイアウト修正

  EWBが自動的に組んだページレイアウトを調整するための“組版トリガ”について説明していきます。

//iii //in215組版トリガの種類

  組版トリガは、編集トリガと異なり“@@@@”がトリガの開始文字列になっています。もし、原稿中で“@@@@”を使いたい場合は、“@@@@@@@@”と入力してください。また、ほとんどの組版トリガは、トリガ本体の後に半角パーレン“()”を入力します。この半角パーレンの中には、いくつかの引数がはいります。

//k1{
//g{//in216強制改行―“@@@@//in225break()”、“@@@@//in226hbreak()”//}
//|両者ともに、行を強制的に分割するトリガです。行中の改行したい位置に入力してください。“@@@@break()”は折った行を左右均等に割り、“@@@@hbreak()”は折った行を左詰めにします。

//list2{
□□□□□□□□□□□□□□□□□□□□□□□□□

////i 折りたい見出し@@@@hbreak()文字列

□□□□□□□□□□□□□□□□□□□□□□□□□
//}

//g{//in217改行の抑制―“@@@@//in227mbox()”～“@@@@end”//}
//|“@@@@mbox()”と“@@@@end”で囲まれた文字列の途中での改行を抑制します。

//list2{
□□□□□□□□□□□□□□□□□□□□□□□□□
□□@@@@mbox()Windows Programing@@@@end□□□□□□□
□□□□□□□□□□□□□□□□□□□□□□□□□
//}

//g{//in218強制改ページ―“@@@@//in229clearpage(n)”//}
//|強制的に改ページするトリガです。改ページする回数を引数で渡します。“@@@@clearpage(1)”と入力すると1回改ページを行い、“@@@@clearpage(2)”と入力すると1回改ページをし、さらに白ページを出力します。もし、“@@@@clearpage()”のように引数を省略すると、1回改ページをします。

//list2{
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@clearpage(2)  //cmt{改ページして白ページを出力//}
□□□□□□□□□□□□□□□□□□□□□□□□□
//}

//g{//in219白ページ作成―“@@@@//in230siropage(n)”//}
//|柱もノンブルも無い白ページを作成するトリガです。白ページのページ数を引数で渡します。“@@@@siropage(1)”と入力すると1ページ作成され、“@@@@siropage(2)”と入力すると2ページの白ページを作ります。もし、“@@@@siropage()”のように引数を省略すると、1ページの白を作ります。

//list2{
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@siropage(2)  //cmt{2ページの白ページを出力//}
□□□□□□□□□□□□□□□□□□□□□□□□□
//}

//g{//in220スペースの調整―“@@@@//in231vspace(x)”、“@@@@//in232hspace(x)”//}
//|縦と横のスペースを調整するためのトリガです。“@@@@vspace()”は縦方向のスペースに、“@@@@vspace()”は横方向のスペース調整に使います。両者ともに引数として調整量を入力します。引数の単位としては、“mm、H（歯）、W（字）、l（行）”が使えます。引数には小数も使え、正の値を指定すると広がり、負の値を指定すると詰まります。“@@@@vspace(-0.5l)”のように入力します。

//list2{
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@vspace(1l)  //cmt{縦方向のスペース調整//}
□□□□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□@@@@hspace(0.1mm)□□□□□□□□
                //cmt{横方向のスペース調整//}
//}

//g{//in221右揃え―“@@@@//in233right()”～“@@@@end”//}
//|“@@@@right()”と“@@@@end”で囲まれた部分を右揃えにします。

//list2{
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@right()//cmt{……………開始を表すトリガ//}
□□□□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@end    //cmt{……………終了を表すトリガ//}
□□□□□□□□□□□□□□□□□□□□□□□□□
//}

//g{//in222中揃え―“@@@@//in234center()”～“@@@@end”//}
//|“@@@@center()”と“@@@@end”で囲まれた部分を中揃えにします。

//list2{
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@center()//cmt{……………開始を表すトリガ//}
□□□□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@end    //cmt{……………終了を表すトリガ//}
□□□□□□□□□□□□□□□□□□□□□□□□□
//}

//g{//in223左揃え―“@@@@//in235left()”～“@@@@end”//}
//|“@@@@left()”と“@@@@end”で囲まれた部分を左揃えにします。

//list2{
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@left() //cmt{……………開始を表すトリガ//}
□□□□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@end    //cmt{……………終了を表すトリガ//}
□□□□□□□□□□□□□□□□□□□□□□□□□
//}

//g{//in224字下げ―“@@@@//in236jisage(n)”～“@@@@end”//}
//|“@@@@jisage()”と“@@@@end”で囲まれた部分を字下げします。字下げしたい文字数を、引数として指定します。文字数の単位は基本組の字送りです。

//list2{
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@jisage(3)//cmt{……………開始を表すトリガ//}
□□□□□□□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□□□□□□□□□□□□
@@@@end     //cmt{……………終了を表すトリガ//}
□□□□□□□□□□□□□□□□□□□□□□□□□
//}

//g{表の項目前後のアキ調整―“@@@@//in237lineheight(x,y)”//}
//|表組トリガによって作った表の項目前後のアキを広げるために使います。前と後をどれだけ広げるかを半角カンマ“,”で区切られた2つの引数で指定します。単位は、“mm、H（歯）、l（行）”が使えます。

//list2{
////table{
//cmt{1行目の前後を5Hづつ空ける//}
@@@@lineheight(5H,5H)□□□□□	□□□□□	□□□□□□□□□□□□□□□
□□□			□□□□□	□□□□□□□□□□□□□□□□□□□□
□□□□		□□□□		□□□□□□□□□□□□□□□□□□□□□
□□□□□	□□□			□□□□□□□□□□□□□□□□□□□□□□
////table}
//}
//}

//iii 組版トリガを使ってみる

組版トリガを使った組版調整の具体的な例をいくつか見ていきましょう。

//iiii 飛び出した行の修正

  //f020514を見てください。“bootwait”という単語が版面から飛び出ています。この単語を“boot”と“wait”の間で分割してみます。分割した行が少し広がって、左右均等になっているのがわかります（//f020515）。
@@clearpage()

//f020514 飛び出した行

//list2{
     ・
     ・
     ・
”が採用される。offのような文字列の場合、そのデバイスに対してはプロセスが起動さ
れない。
タイプ////|initがプロセスを扱う方法。off、once、wait、respawn、boot、boot//sl{@@@@break()//}
wait、power、powerwait、initdefaultのいずれかの文字列である。これらのオプション
の詳細は『UNIX System Administrator's Guide』（あるいはこれに相当するシステムの
     ・
     ・
     ・
//}

//f020515 “@@@@break”の利用

//iiii 見出しの改行

  次に、見出しを分割してみましょう。//f020516を見てください。この行を“の”の後で改行してみます。今度は、“@@@@hbreak()”を使ってみます。分割された行が左詰めになったことがわかります（//f020517）。

//f020516 なりゆきで折れた見出し

//list2{
     ・
     ・
     ・
　今後のC Newsリリースでは、B News 2.11のように、この機構が自動的に行われる。し
たがって、このスクリプトは不要になるはずである。

////ii　historyファイルとlogファイルの//sl{@@@@hbreak()//}トリミング

　LIBDIRディレクトリにある3つのファイルhistory、log、errlogは、電子ニュースの動
作を記録するためのものである。これらのファイルは急速に大きくなるため、トリミング
する必要がある。////g{絶対に忘れてはならない。////g}
     ・
     ・
     ・
//}

@@clearpage()
//f020517 “@@@@hbreak”の利用

//ii //in590目次の生成

  目次は見出しを抽出して作ります。あらかじめスタイルファイルで目次として使用されるように定義された見出しを、コマンドで一括して抽出して目次ファイルを作成します。
  目次の作成には//g{//in591gettoc//}コマンドを使用します。

//list2{
% PS
% gettoc
//}

  ここで大事なのは、全原稿ファイルが組版済みである、ということです。そのため、gettocを実行する前に全部の文書をPSコマンドでコンパイルしておきます。そして使用されている見出しのうち目次として使用するものだけが抜き出され、//g{//in592contents.ewb//}というファイルが作られます（//l020501）。
  contents.ewbは通常のEWB原稿ファイルと同じ扱いですので、テキストエディタで編集することも可能です。ただし、もう一度gettocを実行するとcontents.ewbは変更されるので注意してください（それまで使用していたcontents.ewbはcontents.ewb~として保存されます）。

@@clearpage()
//l020501 contents.ewb
  
  こうしてできた目次ファイルをbookコマンドでEWB文書として登録します。

//list2{
% book 1 insert contents.ewb
//}

  これで本の先頭に目次が作られることになります。

//ii //in240索引作成

  ここでは、索引作成の作業について触れてみます。索引は項目が出てくるページを拾わなくてはならないため、レイアウト修正が終り、各ページの内容がすべてフィックスしていないと作成できません。ただし、索引に入れる項目の入力や読みなどは、レイアウトとは無関係ですから、本文原稿の編集が終った時点から行うと大変効率的です。

//iii 索引作成の手順

  //f020518は、EWBでの索引作成の手順を示したものです。索引の入力には、“索引トリガ入力”と“索引項目入力”という2つの作業があります。原稿の中に入れる“索引トリガ”は単なる印の意味しか持っておらず、実際に、索引ページに出力される項目は、“//in241索引ファイル”と呼ばれるものに入力します。これらの2つの情報が本文の組版時に結合され、索引出力用の中間ファイルが出来上がります。

//f020518 索引作成の手順

  索引トリガと索引ファイルの関係は、図表トリガと物理属性ファイルとの関係に似ています。索引トリガは、原稿のどの位置に索引項目があるのかを示す印で、その実体である索引として出力する文字列やソーティングに必要な読みは、原稿とは別の索引ファイルに記述する仕掛けになっています（//f020519）。このように索引入力を2つに分けることで、原稿から余計な情報をはずすことで可読性が上がり、段落や節全体などを要約した索引を入れることができるようになります。

//f020519 索引トリガと索引ファイルの関係


//iii 索引トリガの入力

  索引トリガは、本文の出力には影響しないため、原稿中のどんな場所にでも入力することができます。原稿中に“////in番号”と入力し、この番号が重複しなければ、昇順になっている必要はありません。もし、番号のすぐ後に数字がある場合には、トリガとの区別ができなくなってしまうため、数字の前に半角スペースを1つだけ入れてください。また、1つの文字列を複数の索引として扱いたい場合には、索引トリガを必要な数だけ入力します。次に示す原稿は、“LIBDIRディレクトリ”に対して3つの索引トリガを入力した例です。

//list2{
　//sl{////in10////in20////in30//}LIBDIRディレクトリにある3つのファイルhistory、log、errlogは
、電子ニュースの動作を記録するためのものである。これらのファイルは急速に大きくな
るため、トリミングする必要がある。////g{絶対に忘れてはならない。////g}
//}

  なお、物理属性ファイルで読み込みを指定した図表ファイルの中には、索引トリガを記述することができません。

//iii 索引の宣言

  索引項目を入力する前に、EWB-Shelfに対して「これから索引を扱います」という宣言をします。図表取り込みの宣言と同じ扱いです。

//list2{
% //sl{book//}
  # Body       Document file          Page Style file           Options
  1 sample2    sample2.doc            (*1) -                    tex2
% //sl{book 1 useindex//}
  # Body       Document file          Page Style file           Options
  1 sample2    sample2.doc            (*1) -                    useindex tex2
%
//}

  この宣言には、原稿番号を指定します。オプションのところに“useindex”という文字列が付け加わっています。

  さらに、索引出力の宣言をします。通常の原稿と同様に“book add index”などの命令で登録します。

//list2{
% //sl{book add index//}
  # Body       Document file          Page Style file           Options
  1 sample2    sample2.doc            (*1) -                    useindex tex2
  2 index      ---                    (?0) index.cls                 tex2
%
//}

  このとき、原稿の名前は必ず“index”です。索引原稿ファイルの実体は必要ありません。

//iii 索引項目の入力

  索引トリガの入力と宣言が終ったら、索引項目として出力する文字列の入力を行います。本体名に続いて、“.index”と入力します。ここでは、“sample2.index”と入力してみましょう。

//f020520 索引入力エディタの入力画面

  画面が、一瞬にして切り替わり、“//in242索引入力エディタ”が起動します（//f020520）。このエディタは、1つの索引トリガに対して、1つの画面が割り当てられます。入力画面の下半分に、注目する索引トリガの行が表示され、着目している索引トリガが反転しています。一方、画面の上半分が入力する部分であり、7つの入力フィールドがあります。最初の状態では、“エントリ”と書かれているフィールドが反転しています。この反転しているフィールドを//g{//in243着目フィールド//}と呼び、このフィールドの移動には上下左右の矢印キーを使います。
  では、それぞれのフィールドの意味を説明しましょう。

//k1{
//g{//in244エントリ//}
//|索引の“1レベル”に出力される文字列を入力します。原稿の入力と同じように半角カナ文字は使えません。
//g{サブエントリ//}
//|索引の“2レベル”に出力される文字列を入力します。原稿の入力と同じように半角カナ文字は使えません。省略可能です。
//g{サブサブエントリ//}
//|索引の“3レベル”に出力される文字列を入力します。原稿の入力と同じように半角カナ文字は使えません。省略可能です。
//g{読み//}
//|各エントリの読みを入力します。EWBでは、この読みの順序で並べ替えを行い、出力します。“全角ひらがな”あるいは“全角カナ”のどちらかに統一して入力してください。エントリに漢字が含まれていない場合は、省略可能です。
//g{//in245コマンド//}
//|項目のページ番号を修飾する命令を指定します。“it（イタリック書体）、bd（ボールド書体）”のどちらかを指定します。
//}

  着目フィールドの入力をはじめる時に、特殊な操作は必要ありません。そのまま文字を入力すると、“文字入力モード”に切り替わり、カーソルが現れます（//f020521）。このモードでは、左右の矢印キーでカーソル移動ができ、バックスペースキーで文字の削除ができます。文字の入力が終ったら、リターンキーを1回押すと内容が確定し、着目フィールドが次に移動します。既に、フィールド内に文字がある場合には、スペースキーを1回押してください。カーソルが先頭文字に移動し、再び、文字入力モードになります。

//f020521 文字入力モード

  必要なフィールドへの入力が終了したら、“ctrl-N”を押すと、次の索引トリガの入力画面になります。この時に、“ctrl-P”を押すと、1つ前の画面に戻ることができます。また、索引入力エディタには、文字列検索の機能が用意されています。入力画面で、“ctrl-R”を押すと、検索モードに切り替わります。画面右下の“文字列”というフィールドに、検索したい索引トリガ番号や文字列を入力し、リターンキーを押してください（//f020522）。検索された索引トリガの入力画面に切り替わります。

//f020522 検索モード

  すべての入力が終ったら、“ctrl-W”を入力してください。画面下に“../ForAll.index”という表示が現われます。これが保存されるファイル名ですので、そのままリターンキーを押してください。そして、この状態で、“ctrl-E”を入力すると終了します。

//iii 索引の出力

  索引トリガの入力と索引入力エディタによる入力が終了したら、さっそく出力してみましょう。索引の出力は“index.OUT”と入力します。

//list2{
% //sl{book//}
  # Body       Document file          Page Style file           Options
  1 sample2    sample2.doc            (*1) -                    useindex tex2
  2 index      ---                    (?0) index.cls            tex2
% //sl{index.out//}
debug ' ewb2latex -y -f ../triger.def  -s ../ewb2latex.cls  -P `cat sample.fpg` 
-T idx.tmp -o sample2.tex ../sample2.doc '
pl-new sample2.tex && pl-new sample2.tex &&  :
This is pTeX, Version p2.1.9, based on TeX, Version 3.14159 (EUC) (Web2C 7.3.1)
(sample2.tex
pLaTeX2e <1996/03/05>+2 (based on LaTeX2e <1996/06/01> patch level 0)
(../ewb2latex.cls
Document Class: ewb2latex 1996/10/31 19:59 Document style for `pssted sample fil
e'
*** make dvi for printer ***
(/usr/local/ewb/3.3/ewbmacros/lib/ewbbase3_3.sty
(/usr/local/ewb/3.3/ewbmacros/lib/cm/OT1cmr.fd)
(/usr/local/ewb/3.3/ewbmacros/lib/cm/OT1cmtt.fd)
(/usr/local/ewb/3.3/ewbmacros/lib/cm/OMLcmm.fd)
  .........省略
(see the transcript file for additional information)
Output written on sample2.dvi (1 pages, 2708 bytes).
Transcript written on sample2.log.
mv sample2.dvi sample2.Dvi
indexassign -i idx.tmp -o tmp.idx sample2.idx && mv tmp.idx sample2.idx 
mendex -t index.ilg -o tmp.tex -s ../indexsty ../Targets/test.idx ../Targets/ind
ex.idx
This is mendex version2.3f [10-Dec-96].
Scanning input file ../Targets/sample2.idx....done.(3 entries accepted.)
Scanning input file ../Targets/index.idx....done.(no entry accepted.)
3 entries accepted.
Sorting index....done(4 comparisons).
Sorting pages....done(no comparison).
Making index file....done.
no warning, written in index.ilg.
Output written in tmp.tex.
cp index.fpg tmp.fpg
echo '\n' >> tmp.fpg
sed -e 's/\([0-9][0-9]*\)/s\/\\\\begin{document}\/\\\\begin{document}\\\\setcoun
ter{page}{\1}\////' < tmp.fpg > tmp.sed
sed -e 's/\\begin{document}\\/\\\\begin{document}\\/' < tmp.sed > tmp2.sed
sed -f tmp2.sed < tmp.tex > tmp2.tex
sed -e 's/\documentclass/\documentclass[printer]/' < tmp2.tex > index.tex
pl-new index.tex
This is pTeX, Version p2.1.9, based on TeX, Version 3.14159 (EUC) (Web2C 7.3.1)
  .........省略
(see the transcript file for additional information)
Output written on index.dvi (2 pages, 2972 bytes).
Transcript written on index.log.
mv index.dvi index.Dvi
/usr/local/ewb/3.3/bin/dvips -N0 -mode supre -D2400 -M -O-10mm,0mm -s -o ../Targ
ets/index.PS ../Targets/index.Dvi 
This is dvipsk 5.86 p1.5c Copyright 1996-2000 ASCII Corp.(www-ptex@ascii.co.jp)
based on dvipsk 5.86 Copyright 1999 Radical Eye Software (www.radicaleye.com)
' TeX output 2000.12.19:1212' -> ../Targets/index.PS
dvips: no match for special paper size found; using default
<texc.pro><cmtt9.pfb><cmr10.pfb><cmsy10.pfb><cmtt10.pfb><texps.pro>
<special.pro><color.pro>. [29] [30] 
psp -Ppslp2 ../Targets/index.PS 
%
//}

//ii //in246エラー

  EWB-Shelfの使用時に出力されるエラーメッセージとその対処方法を説明します。発生するエラーの種類としては、次の3つがあげられます。

//k1{
・文字入力のエラー
・トリガ入力のエラー
・その他のエラー
//}

//iii 文字入力のエラー

//k1{
//g{☆:sample.doc(11行):ＴｅＸでは扱えない文字です。終了します//}
//|EWBで、扱えない文字（半角カナ文字など）が原稿中に含まれています。原稿の中から、その文字を取り除いてください。
//g{☆:sample.doc(12行):ＴｅＸでは扱えない文字です。げた文字（〓）に置き換えます//}
//|EWBで、扱えない文字（NEC外字など）が原稿中に含まれています。ゲタ文字に置き換えて出力されます。
//g{☆:sample.doc(13行):写植機で出力できないかもしれません//}
//|JIS第2水準の文字で、写植機から出力できない可能性がある文字が表示されます。
//g{sample.doc(123行):pass1:1行が長すぎます//}
//|原稿ファイルの最後の行に“^Z”（0x1a）が入っています。取り除いてください。
//}

//iii トリガのエラー

//k1{
//g{sample.doc(213行):未定義トリガがあります//}
//|未定義トリガがあります。トリガの入力を確認してください。
//g{sample.doc(213行):ブロック////c1(200行)を閉じていません//}
//|グループトリガを閉じていません。または、グループトリガの範囲に、見出しトリガがあるかもしれません。確認してください。
//g{sample.doc(200行):200行の////c1{を閉じていません//}
//|グループトリガを閉じていません。トリガを入力してください。
//g{sample.doc(200行):sample.doc(180)行の////c1{が対応してません//}
//|グループトリガの開始と終了の対応が間違っています。確認してください。
//g{sample.doc(200行):トリガ////c1は本文の途中に入れられません//}
//|小組や箇条書などの開始トリガが行の途中にあります。開始トリガは、行頭に入力してください。
//g{sample.doc(200行):トリガc1の後に中括弧がありません//}
//|小組や箇条書などのトリガの直後に中括弧がありません。中括弧を入力してください。
//g{sample.doc(200行):グルーピングを閉じた直後にトリガがあります//}
//|小組や箇条書などの終了トリガの後に、文字あるいはトリガがあります。終了トリガの後には改行を入れてください。
//g{sample.doc(200行):トリガ////c1は////listのグループの中に入れられません//}
//|許されていないトリガのネストがあります。トリガがネストしないように修正してください。
//g{sample.doc(200行)f0201:ラベルが二重定義されています//}
//|原稿中の図表トリガの番号が重なっています。
//g{sample.doc(200行)ラベル(////f0201)が見つかりません//}
//|定義されていない番号の図表を参照しています。
//g{sample.doc(200行):キャプション(////f0201)の中ではタブは使えません//}
//|図表キャプションの中にタブがはいっています。タブを取り除いてください。
//g{sample.doc(200行):////cmt{～////}は一行に書いて下さい//}
//|プログラムトリガの中のコメントトリガが複数行になっています。コメントは1行で記述してください。
//g{sample.doc(200行):組版トリガ@@@@vspaceの引数が間違っています//}
//|組版トリガの引数が間違っています。単位を確認してください。
//}

//iii その他のエラー

  組版時に次のようなメッセージが表示されて、画面が止まることがあります。このような時は、“x”を入力し、リターンキーを押して実行を停止させてください。

//list2{
% //sl{chap02.pre//}
debug ' ewb2latex -y -f ../triger.def  -s ../ewb2latex.cls  -P `cat sample.fpg` 
-T idx.tmp -o chap02.tex ../chap02.doc '
pl-new chap02.tex && pl-new chap02.tex &&  :
This is pTeX, Version p2.1.9, based on TeX, Version 3.14159 (EUC) (Web2C 7.3.1)
(chap02.tex
pLaTeX2e <1996/03/05>+2 (based on LaTeX2e <1996/06/01> patch level 0)
(../ewb2latex.cls
Document Class: ewb2latex 1996/10/31 19:59 Document style for `pssted sample fil
e'
*** make dvi for printer ***
(/usr/local/ewb/3.3/ewbmacros/lib/ewbbase3_3.sty
(/usr/local/ewb/3.3/ewbmacros/lib/cm/OT1cmr.fd)
  .........省略
[1] [2]
! Undefined control sequence.
l.51 \kexxx

? //sl{x//}
Output written on chap02.dvi (2 pages, 1288 bytes).
Transcript written on chap02.log.
shelf: 終了ステータス1. 終了します
%
//}

  このようなエラーが起きる原因は原稿入力のミスではなく、スタイルファイルやトリガ定義ファイルなどにあることが多いので、担当の制作者やEWBの管理者に相談してみましょう。
