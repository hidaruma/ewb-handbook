chapter 2
//i 標準機能の拡張

  EWBの標準機能は、本を制作していく上で、必要最低限の要素を表現するものばかりです。実際にEWBで本を作っていくと、標準機能だけでは、どうしても表現しきれない部分が出てきてしまいます。このような時のために、EWBには拡張を行う機能が備わっています。
  ここでは、EWBに少し手を加えることによって、EWBの表現力を広げる方法について解説していきましょう。

//ii EWBの表現力を広げる

  書店に並べられている書籍などをよく眺めてみると、特殊な文字や記号が数多く使われ、網かけや特殊な罫線などをうまく利用しています。もちろん、これらは、出版業界ではあたりまえのように使われているものばかりです。
  しかし、EWBはUNIXコンピュータ上で動作するソフトウェアであり、利用しているキーボードやプリンタは、通常のコンピュータ規格に沿った標準的なものです。そのため、一般の書籍に用いられている特殊な文字や記号などは、キーボードを使って表現できません。
  そこで、EWBでは、本を制作する上で必要な罫線や特殊記号などが取り扱える拡張機能を備えています。EWBが実際に組版を行う場合に、いくつかのファイルを参照するようになっています。参照されるファイルには、組版時に必要な規則や特殊記号が記述されており、このファイルを修正することで拡張できるわけです。

//ii //in278約物修正の一括処理

  入力された文字の中には、基本の組版処理では不格好になってしまうことがあります。たとえば、行頭に位置する開き括弧は、そのままEWBで組版処理させると、インデントと約物のアキが重なって、大きな空白ができてしまいます。これを避けるには、行頭の括弧をファイルの中から探し出し、特殊なトリガを入れていかなければなりません。このような作業を効率的に行うために、EWBの//g{//in279スクリプト処理//}と呼ばれる機能が用意されていて、EWBで組版を行う前に、“//in281sed”というツールを用いて処理をさせます。約物のアキ調整を行うには、“/usr/local/ewb/3.3”にある“//in280yakumono.sed”というスクリプトファイルを利用します。このファイルを、作業ディレクトリにコピーすると、EWB-Shelfが自動的にスクリプト処理を行うような仕掛けになっています。

//ii //in282トリガの表現力を広げる

  これまでに見てきた各種トリガはどれも、すでにEWBに備わっている機能でした。しかし、備わっている機能だけでは、EWBで表現できるレイアウトに制限が出てきてしまい、実際に出版されているような多種多様なものには、対応することができません。本によっては、見出しに罫飾りをしたいとか、小組を罫線で囲みたいなどといったようなトリガ単位でEWBの表現力を広げなければならない場合があります。EWBでは、このような拡張を行うには、組版エンジンである//LaTeXeに手を加えて、必要な機能を実現します。

//iii 組版に必要なファイル

  まずは、EWBが組版を行う時に参照するファイルを明らかにしておきましょう。

//iii 参照ファイルの内容

  EWBが実際に組版を行う場合には、いくつかのファイルを参照します。そのうち2つは、利用できるトリガにはどういったものがあるのかということを記述した“トリガ定義ファイル”です。あとは、組版を担当する//LaTeXeが参照するマクロがたくさん収められている“スタイルファイル”と呼ばれているものです。これらのファイルは作業ディレクトリか、その下の“Styles”ディレクトリに置いておく必要があります。

//iiii //in283トリガ定義ファイル“//in284triger.def”

  //LaTeXeのマクロと原稿中に指定した編集トリガとの対応を設定しているのが、“トリガ定義ファイル”です。このファイルには、マクロとトリガが“一対一”で対応しています。そして、利用できるトリガを実際に記述したファイルが“triger.def”と呼ばれ、原稿ファイルを//LaTeXe形式のファイルに変換する際に参照します。なお、トリガ定義ファイルに記述してあるトリガは編集トリガだけであり、組版トリガの定義はありません。
  このファイルはpsstedにより生成されるため、トリガ定義をエディタで追加した場合、新たに体裁ファイルからpsstedでスタイルファイルを作成すると修正部分が失われてしまいますので注意してください。

//iiii //in499特殊トリガ定義ファイル“//in500triger.diff”

  “triger.def”の内容に追加する形で使用されるトリガ定義ファイルです。“triger.def”と同様に、マクロと編集トリガの対応を記述します。トリガ定義を追加する場合に使用します。EWBの標準機能だけを利用する時には必要ありません。

//iiii //in285スタイルファイル“//in286ewb2latex.cls”

  それぞれの本の体裁に合わせた//TeXマクロが収められているファイルです。psstedで入力した体裁情報が記述されています。このファイルを直接修正した場合、新たに体裁ファイルからpsstedでスタイルファイルを作成すると修正部分が失われてしまいますので注意してください。

//iiii //in287ベーススタイルファイル“//in288ewbbase3_3.sty”

  EWBの基本的なマクロが収められているファイルです。このファイルは組版の中枢部分に相当し、EWBの管理者がマクロの不具合修正や仕様変更の際に触れるものです。このファイルは、“/usr/local/ewb/3.3/ewbmacros/lib”に置いてあり、カレントディレクトリにこのベーススタイルが存在しなくても、スタイルファイルが自動的に共有ディレクトリから探して読み込むようになっています。

//iiii //in289特殊スタイルファイル“//in290diff.sty”

  “ewb2latex.cls”の内容に追加する形で使用されるスタイルファイルです。体裁マクロを追加する場合に使用します。EWBの標準機能だけを利用する時には必要ありません。

//iiii //in595索引スタイルファイル“//in597index.cls”

  索引の体裁に合わせた//TeXマクロが収められているファイルです。psidxstedで入力した体裁情報が記述されています。このファイルを直接修正した場合、新たに体裁ファイルからpsidxstedでスタイルファイルを作成すると修正部分が失われてしまいますので注意してください。

//iiii //in596特殊索引スタイルファイル“//in598indiff.sty”

  “index.cls”の内容に追加する形で使用される索引スタイルファイルです。索引体裁マクロを追加する場合に使用します。EWBの標準機能だけを利用する時には必要ありません。

//iiii //in599索引変換情報ファイル“//in600indexsty”

  抽出された索引を並び替えて//TeX形式に変換する際に、どのような//TeXファイルへ変換するかという情報を収めたファイルです。psidxstedが生成します。

//iii 参照ファイルの相互関係

  囲み罫や特殊記号などといった特別の機能を持ったマクロが収められているファイルです。トリガ拡張を行う場合に作成するファイルで、EWBの標準機能だけを利用する時には必要ありません。


//f030201 トリガ定義ファイルとスタイルファイルの関係

  EWBが組版時に参照するファイルは、//f030201のような関係になっています。EWBで組版を行うと、まず最初に“triger.def”ファイルを参照して、トリガを含んだ原稿ファイルを//LaTeXeの形式に変換します。このとき、“triger.diff”があればそれも参照します。次に、platexが起動され、“ewb2latex.cls”が自動的に読み込まれます。さらに、“ewbbase3_3.sty”と“diff.sty”が順次、読み込まれるようになっています。なお、拡張専用の“diff.sty”というファイルが存在しない場合には、読み込みは行いません。

//iii トリガ拡張の作業手順

  EWBのトリガ拡張を行う場合には、拡張の内容によって作業手順が多少異なってきます。
  トリガの表現力を拡張する場合には、「トリガを追加するだけで作業が済むのか」、「マクロまで作成しなければならないのか」などといったことを十分に考察してから拡張を行なわなければなりません。トリガの単純な追加で済むような内容であれば、stedで作成されるトリガ定義ファイル“triger.def”を修正するだけです。また、特殊な機能を実現するためにマクロを作成しなければならない場合には、次の2つのステップを踏まなければなりません。

//k1{
・“diff.sty”をエディタで作成し、機能を実現するために必要なマクロを記述する
・作成したマクロとトリガを対応させるために、psstedで自動的に生成された“triger.def”を修正する
//}

  トリガを拡張する場合には、他の“ewbbase3_3.sty”や“ewb2latex.cls”といったスタイルファイルを修正する必要はありません。

//ii トリガ定義の拡張

  ここでは、実際に“triger.def”にトリガを定義する方法を解説しましょう。

//iii トリガ定義ファイルの文法

  “triger.def”の基本的な書式は、“トリガの種類のキーワード”、“トリガ名”、“トリガに対応したマクロ”、“その他の情報”の各項目をタブやスペースで区切り、1つのトリガに対して1行ずつ記述します。各項目が空白を含む時は、ダブルクォーテーションで囲うようにしてください。
  トリガ定義ファイルでは、編集トリガの種類を識別するためのキーワードには、次のようなものがあります。

//table[l(10w)l]{
//in291文字置換	//in292defstr
//in293単純トリガ	//in294defsimple
//in295強調トリガ	//in296defgothic
//in297グループトリガ	//in298defgroup
//in299リストトリガ	//in300deflist
//in301表組トリガ	//in302defTable
//in303見出しトリガ	//in304defcaption
//in305図表トリガ	//in306deffigure
//in307箇条書トリガ	//in308defitem
//in309脚注トリガ	//in310deffootnote
//in311非展開トリガ	//in312defnoexpand
//in501ラベルトリガ	//in503deflabel
//in502参照トリガ	//in504defref
//in529URLトリガ	//in530defurl
その他	//in313defescape
	//in314deftab
	//in315defchapter
//}

//iii //in316文字置換

  “//in317defstr”は、1つの文字列を別の1つの文字列に置換します。

//list{
defstr  置換する文字列  置換先文字列
//}

//iii //in318単純トリガ

  単純トリガは単純に文字を置き換えるトリガです。これを定義するには、“//in319defsimple”を使います。

//list{
defsimple   トリガ名	置換文字列
//}

//k1{
//g{置換文字列//}
//|ここに入力する文字列は、マクロ名でもかまいません。ただし、バックスラッシュの記号はエスケープされてしまうため、2つ続けて“\\”と記述してください。
//}

//iii //in320強調トリガ

  書体の切り換えを行う強調トリガ“////g{〜////g}”は、“//in321defgothic”を使って定義します。
//list{
defgothic  トリガ名  始まりのマクロ  終りのマクロ
//}

  引数を取るマクロを作成した場合は、ここに定義します。たとえば、引数の文字列に対して罫囲いする“\boxit”というマクロを作成し、“////kakomi{文字列////kakomi}”のようなトリガ入力を行いたい場合には、

//list2{
defgothic  kakomi  "\\boxit{"   "}"
//}

と記述します。
  ルビ、傍点もこのトリガにより定義されています。

//iii //in322グループトリガ

  小組トリガ“////c1”は“//in323defgroup”を使って定義します。
//list{
defgroup  トリガ名  マクロ名  改行挿入の有無（Y/N）[脚注の扱い（Y/N）]
//}

//k1{
//g{マクロ名//}
//|環境型に定義したマクロの定義名を記述します。
//g{//in324改行挿入の有無//}
//|改行挿入する“Y”か、しない“N”かを指定します。
//g{脚注の扱い//}
//|このグループトリガで囲まれた範囲に書かれた脚注トリガの処理方法を指定します。通常の方法で作成した小組の中では脚注トリガが自由に使えますが、拡張した罫巻した小組では、脚注が出力できない場合があります。このような場合に、この項目を“Y”にすると出力できるようになります。この“脚注の扱い”は省略可能です。
//}

  実際に入力すると、次のようになります。
//list2{
defgroup	c1	kogumi	YN
//}

//iii //in325プログラムトリガ

  プログラムトリガ“////list”は“//in326deflist”を使って定義します。
//list{
deflist    トリガ名    マクロ名    タブストップ    字詰め   オプション
オプション:=行番号自動発生の有無（Y/N）
　　　　　　バックスラッシュを￥マークにする（Y/N）
　　　　　　改行挿入の有無（Y/N）
//}

//k1{
//g{マクロ名//}
//|環境型に定義したマクロの定義名を記述します。
//g{タブストップ//}
//|このトリガでタブを何個のスペースに展開するかを指定します。
//g{字詰め//}
//|EWBの旧バージョンで使われたもので現在は使用しません。
//g{オプション//}
//|行番号自動発生の有無、バックスラッシュを円マークにするかどうか、そして改行挿入の有無を“Y”か“N”を指定します。
//}
実際に入力すると、次のようになります。
//list2{
deflist list	programi	2	74.00	NNY
//}

//iii //in327表組トリガ

  表組のトリガ“////table”は“//in328defTable”を使って定義します。
//list{
defTable トリガ名  マクロ名  タブストップ  項目間隔  項目内行送り
						改行挿入の有無（Y/N）
//}

//k1{
//g{項目間隔//}
//|1つの行の項目間のアキを歯単位で指定します。
//g{項目内行送り//}
//|1つの項目が複数行になった場合の行送りです。歯を単位にして指定します。
//}

  実際に入力すると、次のようになります。
//list2{
defTable    table   hyoui       2   10.00   20.00   N
//}

//iii //in329見出しトリガ

  見出しトリガ“////i”は、“//in330defcaption”を使って定義します。
//list{
defcaption	トリガ名	マクロ名
//}

実際に入力すると次のようになります。
//list2{
defcaption      i       chapter
defcaption      ii      section
//}

//iii //in331図表トリガ

  図表トリガ“////f”は“//in332defffigure”を使って定義します。
//list{
deffigure	トリガ名	マクロ名	図とキャプションの空き
//}

//k1{
//g{図とキャプションの空き//}
//|歯単位で指定します。ここで指定した値が通常のアキになります。もし、個々に変更する場合は、物理属性ファイルで設定します。
//}
//list2{
deffigure       f       figure      20.00
//}

//iii //in333箇条書トリガ

  箇条書のトリガは“////k1”は“//in334defitem”を使って定義します。
//list{
defitem   トリガ名     マクロ名     改行挿入の有無（Y/N）
//}
  たとえば、箇条書環境“kajyoix”を作成し、それを“////k9{〜////k9}”で利用したければ、
//list2{
defitem k9      kajyoix      Y
//}
と記述します。

//iii //in335脚注トリガ

  脚注トリガ“////ky”は“//in336deffootnote”を使って定義します。
//list{
deffootnote    トリガ名   マクロ名
//}
  実際に入力すると、次のようになります。
//list2{
deffootnote     ky      \\footnote
//}

//iii //in337非展開トリガ

  //TeXにファイル名や数値を渡す場合に使用します。“//in338defnoexpand”を使って定義します。
//list{
defnoexpand  トリガ名  始まりのマクロ  終りのマクロ
//}
  ここではEPSファイルを読み込む“////ZUHAN”の例を示します。
//list2{
defnoexpand  ZUHAN  "\\ZUHAN "  "\\end{}"
//}

//iii //in505ラベルトリガ

  見出しの参照元を指定するラベルトリガ“////label”は“//in506deflabel”を使って定義します。
//list{
deflabel    トリガ名   始まりのマクロ   終りのマクロ
//}
  実際に入力すると、次のようになります。
//list2{
deflabel     label      "\\label["	"]"
//}

//iii //in507参照トリガ

  見出しを参照するトリガ“////numref（番号の参照）”、“////strref（文字列の参照）”、“////pageref（ページ番号の参照）”は“//in508defref”を使って定義します。
//list{
defref    トリガ名   始まりのマクロ   終りのマクロ
//}
  実際に入力すると、次のようになります。
//list2{
defref     numref      "\\numref["   "]"
defref     strref      "\\strref["   "]"
defref     pageref     "\\pageref["  "]"
//}

//iii //in531URLトリガ

  //in533URLを記述するためのトリガ“////url{〜////url}”は“//in532defurl”を使って定義します。
//list{
defurl  トリガ名   始まりのマクロ   第１引数と第２引数の区切り   終りのマクロ
//}
  実際に入力すると、次のようになります。
//list2{
defurl  url     "\\ewbhyperurl{"   "}{"   "}"
//}

//iii その他

  その他に、“defescape”、“deftab”、“defchapter”といった指定項目があります。

//iiii //in339defescape

  “defescape”は、トリガ開始文字列“////”を定義します。他の文字列に置き換えることができますが、完全にサポートされていないので“////”で使用するようにしてください。

//iiii //in340deftab

  “deftab”は、表組とリスト以外の本文中に現れたタブ文字をいくつの空白に置き換えるかを指定します。

//iiii //in341defchapter

  “defchapter”は、見出し番号設定のための文字列を定義します。
//list2{
defchapter chapter
//}
  このように記述した場合、原稿ファイルの先頭に“chapter 5”と入力すると、その原稿の章番号は“5章”からとなります。

//ii //in342マクロの拡張

  ここでは、トリガの定義だけでは実現できないような機能を追加する場合に行うマクロ拡張に触れます。マクロを定義する際の基本的な書き方やEWBの組版の核となる“//in343ewbbase3_3.sty”の解析、さらに実例を使った解説を行います。

//iii マクロ定義ファイルの文法

  //TeXでは、組版の命令や組版時に使う変数を意味する文字列の先頭には、バックスラッシュ記号“\”を付けて、他の文書と区別できるようになっています。たとえば、“\inhibitglue”や“\parindent”、“\advance”といった文字列が//TeXの命令です。
  一般的に、//TeXが識別できる命令の文字列には英文字しか使えないため、バックスラッシュからはじまり、数字や記号類、空白などが書かれている位置までの文字列が命令として見なされ、解釈／処理されます。

//iiii マクロ定義の仕方

  マクロを定義する場合には“\//in344def”という命令を使用し、次の形式で記述します。

//list{
\def\マクロ名{
………
}
//}

  これで、“マクロ名”という名前のマクロが定義できます。“マクロ名”の後ろに書かれている開き括弧と閉じ括弧の中には、そのマクロをどのように動作させるかを記述します。単純に文字列を出力したいのであれば、その文字列をそのまま記述するだけで定義ができ、罫線を引いたりしたい場合には、その動作を行う命令を書けばマクロとして使用できます。
  たとえば、「東京都渋谷区」という文字列を、マクロを使って入力してみましょう。“\address”という名前のマクロを次のように定義します。

//list2{
\def\address{
東京都渋谷区
}
//}

  //TeXの原稿中で、

//list2{
私の会社は、//sl{\address //}にあります。
//}

と入力すると、

//c1{
私の会社は、東京都渋谷区にあります。
//}

という出力が得られます。

//iiii 引数と区切り文字

  マクロには引数を持たせることができ、マクロを利用する時にパラメータとして受け渡すことができます。引数は、マクロを使って定義する際に、マクロ名と開き括弧の間に“#数字”を指定することで表します。

//list{
\def\マクロ名#1#2…#9{
………
}
//}

  マクロ名の後ろに記述した“#1, #2 ... #9”が、マクロへの引数の1番目、2番目〜9番目に対応し、最大で10個の引数を取ることができます。たとえば、先ほどのマクロを「東京都渋谷区」の後ろに、引数を取るようなマクロに変更してみます。

//list2{
\def\address#1{
東京都渋谷区#1
}
//}

  そして、次のような入力を行うと
　　　\address{代々木}		は	東京都渋谷区代々木
　　　\address{初台}		は	東京都渋谷区初台
と展開されます。
  また、引数の間に文字や記号を加えてマクロを定義をすると、その文字や記号類は入力するパラメータを区切る文字として動作します。たとえば、次のようなマクロを定義することもできます。

//list2{
\def\position(#1,#2){
中点のX座標は#1で、Y座標は#2となる
}
//}

  このように定義した場合、このマクロは必ず

//list2{
…したがって、\position(250,310)。そのため、…
//}

というように、カンマで区切って引数を渡さなければ、正しく動作しませんので注意が必要です。これを正しく入力すれば、次のように出力されます。

//c1{
…したがって、中点のX座標は250で、Y座標は310となる。そのため、…
//}

  一般的なマクロを定義する際には、このようなカンマ区切りではあまり指定しませんが、ちょっとした工夫で、マクロへの引数を10個以上渡せるようにできるため、便利な機能といえます。標準のルビトリガも引数を2個持つため、この方法で定義されています。

//iii //in345ewbbase3_3.styファイルの詳細

  “ewb2latex.cls”の中では、書体や見出し、小組、箇条書などといった各要素の体裁指定を行いますが、この中で使用しているマクロは、“ewbbase3_3.sty”ファイルの中で定義されています。この“ewbbase3_3.sty”にはEWBが使用する基本的な体裁のマクロがすべて定義されているため、特別に“//in346ベーススタイルファイル”と呼んで、“ewb2latex.cls”や“diff.sty”といったマクロファイルと区別しています。
  EWBの表現力を拡張するためには、このベーススタイルファイル“ewbbase3_3.sty”の中にどのようなマクロが定義されており、どのように利用したらよいのかということを理解しておかなければなりません。
  そこで、このベーススタイルファイルの詳細を眺めてみましょう。ベースファイル全体は、大きく分けて、次のように構成されています。

//k1{
・変数
・書体と組版の設定
・小組
・箇条書
・見出し
・版面と柱／ノンブル
・脚注
・図表の参照とフロート／非フロート
・キートップ
・囲み罫
・ルビ
・傍点
//}

//iiii //in347変数

  ベーススタイルファイルでは、まずEWB専用のマクロを作成する場合に使用する単位を定義しています。定義されている変数は次の2つです。

//k1{
・行送りを表す単位
・字送りを表す単位
//}

  この行送りと字送りの単位は、さまざまな環境で利用できるように、個別に定義されています。

//iiiii //in348行送り

  行送りは、“\//in349vokuri”として参照できます。これは、“vertical（垂直の）okuri”の意味を表しています。この変数には、使用した時点の環境の行送りが設定されています。たとえば、このマクロを小組環境の中で使えば小組の行送りが、箇条書環境の中では箇条書の行送りが設定されます。このため、“2行アキ”という指定を行う場合には、統一して“2\vokuri”という表現が可能になります。
  また、本文の行送りは、先頭文字を大文字にした“\//in350Vokuri”を用いて参照することができ、この変数を使えばどの環境で利用しても、必ず本文の行送りとなります。

//iiiii //in351字送り

  字送りは、“\//in352hokuri（horizontal okuriの意味を表す）”を用いて参照できます。行送りと同様に、それぞれの環境で参照でき、基本となる本文の字送りは、先頭文字を大文字にした“\//in353Hokuri”という変数で参照できるようになっています。
  また、字詰めの指定を行う場合には、//TeXの全角文字の大きさを表す“//in354zw”を使わずに、この“\hokuri”で表してください。“zw”では、“字送り1歯ツメ”などといった指定を表すことができないためです。

//iiii 組版

  ベースファイル中の組版という名称の部分には、使う書体や字送り、行送りを設定するためのマクロや設定したそれらの要素を利用するためのマクロが定義されています。このマクロは、和文／欧文／数式フォントなどの関連した書体に名前を付けてひとまとめにして定義するものです。EWBでは、各フォントを組みにしたものを“//in355コンポジットフォント（composit font）”と呼んで、一括で管理できるようにしています。
  コンポジットフォントを取り扱う命令としては、次のようなマクロが用意されています。

//k1{
・フォントの定義マクロ
・フォントのコピーマクロ
・書体切り換えマクロ
・強調書体の定義マクロ
//}

//iiiii //in493フォントの定義マクロ

  //in356コンポジットフォントを定義するには、次のマクロを使います。//in362

//list{
\DeclareCompositFont{〈名前〉}[〈文字色〉]{〈和文級数〉}[〈字送り〉]{〈和文フォント〉}
                      [〈欧文級数〉]{〈欧文フォント〉}[〈オフセット〉]
//}

//k1{
//g{文字色//}
//|文字の色をCMYK形式で指定します。シアン、マゼンタ、イエロー、ブラックの順で0.0〜1.0の値を“,”で区切って記述します。
//g{和文級数／欧文級数//}
//|利用する書体の和文や欧文の級数を、Q（級数）を単位として指定します。
//g{字送り//}
//|指定した文字の字送りを、H（歯）を単位として指定します。この字送りは省略することもできます。省略した場合には、和文級数”の値となります。
//g{オフセット//}
//|和欧文間のベースライン位置を調整します。省略した場合には、“0pt”となります。また、書体によって、このオフセットの値は違います。
//g{和文フォント／欧文フォント//}
//|利用する書体名を記述します。ただし、書体名は//LaTeXeが理解できる//in357NFSS2形式で指定しなければなりません。NFSS2形式とは、//LaTeXeで採用された書体表現の形式で、//in358エンコード///in359ファミリ///in360シリーズ///in361シェイプで表します。たとえば“新ゴB”を指定する場合には、

//list{
……{13Q}[13H]{新ゴB}[13Q……
//}

//|ではなく、

//list{
……{13Q}[13H]{JY1/sgo/b/n}[13Q……
//}

//|と記述しなければなりません。//LaTeXeでは、“新ゴB”を“JY1/sgo/b/n”という名前で指定します。EWBで使用できる書体名は「Appendix D 書体一覧表」に記載してありますので、参照してください。
//g{名前//}
//|環境名を指定します。環境名とは、どんな種類の要素であるかということを示した名前のことです。一般に、部は“part”、章見出しは“chapter”などといった環境名を付けています。psstedでは、“見出し番号指定文字列”で指定されたものが使われ、指定されなければ“sectioni”“sectionii”といった名前が使われます。
//}

  たとえば、次のような書体を新たに定義する場合には、

//table[l(6w)]{
環境名	chapter
和文書体	見出しミン
欧文書体	Times-Roman
和文級数	18級
欧文級数	18級
字送り	17歯（1歯ツメ）
文字色
　シアン	0.0
　マゼンタ	0.0
　イエロー	0.0
　ブラック	1.0
//}

“\DeclareCompositFont”マクロを使って、次のように書きます。

//list2{
\DeclareCompositFont{chapter}[0.0,0.0,0.0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{OT1/
ptm/m/n}[0.03zh]
//}

  これで、和文や欧文の書体セットを、“chapter”という環境名で参照できるようになります。
  小組や箇条書の環境名は、自由な名前を付けることができます。ただし、名前の文字列に数字や記号類は含ませることはできません。また、すでに使われている環境名を使って新たに書体を定義することはできないので注意が必要です。

//c2{
//g{Column://in517変形書体について//}
  EWBの和文書体には、かなつめ、長体、平体、斜体といった変形書体が用意されています。これらの変形は“\DeclareCompositFont”マクロ中の書体名で指定します。
  変形を使わない場合、書体名は“JY1/rmn/l/n”のように、最後が“n”になっています。この部分を以下のように記述することで変形の書体として指定できます。

	ba	長体1（字送り方向に10%縮小）
	ca	長体2（字送り方向に20%縮小）
	da	長体3（字送り方向に30%縮小）
	ea	長体4（字送り方向に40%縮小）
	ga	平体1（行送り方向に10%縮小）
	ha	平体2（行送り方向に20%縮小）
	ia	平体3（行送り方向に30%縮小）
	ja	平体4（行送り方向に40%縮小）
	ab	斜体1（字送り方向に10度傾斜）
	ac	斜体2（字送り方向に20度傾斜）
	ad	斜体3（字送り方向に30度傾斜）
	ae	斜体-1（字送り方向に-10度傾斜）
	af	斜体-2（字送り方向に-20度傾斜）
	ag	斜体-3（字送り方向に-30度傾斜）
	c	かなつめ（かなの文字間を詰める。文字自体は変形しない）

  新ゴBの平体1を指定する場合、書体名は“JY1/sgo/b/ga”のように記述します。
  長体を使用する場合、字送りを指定しないと文字級数と同じ字送りになり、文字間が不自然に空いてしまいます。長体を掛けた分だけ歯数を詰めて字送りを指定しておいてください。
//}

//iiiii //in494フォントのコピーマクロ

  新しく定義するのではなく、すでに定義した書体を別の名前で利用するためのマクロです。新しくコンポジットフォントを定義しないで、既にある環境名を別の環境名で参照できるように、環境を一括でコピーすることができるようになっています。コピーを行うには、次のマクロを使います。//in363

//list{
\copycomposit{//cmt{〈コピー先の名前〉//}}{//cmt{〈コピー元の名前〉//}}
//}

  たとえば、書体の定義として“chapter”という環境名がすでに定義され、その環境を“section”としても利用できるようにするには、

//list2{
\copycomposit{section}{chapter}
//}

と記述します。

//iiiii //in495書体切り換えマクロ

“\DeclareCompositFont”や“\copycomposit”で定義した書体を実際に使う場合には、//in364

//list{
\selectcomposit{//cmt{〈名前〉//}}
//}

というマクロを使います。
  たとえば、先ほど定義した“chapter”の書体を使う場合には、

//list2{
…ということで、新しく{\selectcomposit{chapter}定義した書体が}使われます。
//}

というようになります。“名前”には、書体定義の際に付けた環境名を記述します。

//iiiii //in496強調書体の定義マクロ

  //TeXで書体を変更する場合には、“\rm”、“\tt”、“\sl”、“\it”などのコントロールシーケンスを使います。EWBのコンポジットフォントも同様に、コンポジットフォントの一部の書体を変更することができます。たとえば、“\tt”を指定した場合に、その切り換えた時点の環境に設定されているコンポジットフォントの書体を使うようになっています。
  切り換える書体を定義するには、コンポジットフォントの定義と同じマクロを使います。書体切り換えの命令を表す文字列は、環境名のプレフィックスと同時に定義しなければなりません。たとえば、“\tt”という書体切り換えを行いたいのであれば、まず特定の箇所の書体を変えるための命令を、次のマクロを使って定義します。//in365

//list{
\newemph{//cmt{〈名前〉//}}
//}

  “\tt”で切り換えたけば、

//list2{
\newemph{tt}
//}

とします。次に、その“\tt”用のコンポジットフォントを

//list2{
\DeclareCompositFont{tt@chapter}[0.0,0,0,0,0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{OT1/
ptm/m/n}[0.03zh]
//}

と定義します。すなわち、書体切り替えは

//list{
//cmt{〈強調名〉//}@//cmt{〈コンポジット名〉//}
//}

という環境名にして書体を定義しておくのです。

//iiii //in368字詰め／//in369行送り

  EWBでは、字詰めや行送りも書体と同様に、ひとまとめにして“//in366スリップ（//in367slip）”と呼ばれる名前を付けて管理するようになっています。スリップには、

//k1{
・スリップの定義マクロ
・スリップのコピーマクロ
・スリップ切り換えマクロ
//}

というマクロが定義されています。

//iiiii //in497スリップの定義マクロ

  新しくスリップを定義するには、次のマクロを使います。//in370

//list{
\newslip{〈名前〉}{〈行送り〉}%
        {〈段落インデント〉}{〈左マージン〉}{〈右マージン〉}
//}

  ここで設定する“段落インデント”や“左／右マージン”などは、//f030202に示されている箇所の値を意味しています。

//f030202 スリップのパラメータ

//k1{
//g{左マージン／右マージン//}
//|“左マージン”および“右マージン”は、それぞれ字下げ／字上げのことです。
//}

  たとえば、

//table[l(8w)]{
環境名	honmon
行送り	24歯
段落インデント	13歯
左マージン	13歯
右マージン	0歯
//}

というスリップを定義すると、

//list2{
\newslip{honmon}{24H}{13H}{13H}{0H}
//}

となります。
  また、左／右マージンにはマイナスの値も指定することができます。もし、右マージンにマイナスの値を設定すると、版面から文字が飛び出すことになります。
  行送り／段落インデント／左右マージンの各パラメータの後に“//tt{[R]//}”を付加すると、直前のスリップのパラメータを基準にして相対的に各パラメータが設定されるようになります。
  たとえば、

//list2{
\newslip{kogumi}{0H}[R]{0H}[R]{13H}[R]{0H}[R]
//}

というスリップは、直前の環境よりも13歯だけ左マージンを増やすということになります。

//iiiii //in498スリップのコピーマクロ

  新しく定義するのではなく、既に定義したスリップを別の名前にコピーするためのマクロです。//in371

//list{
\copyslip{〈コピー先の名前〉}{〈コピー元の名前〉}
//}

  記述の方法は、コンポジットフォントのコピーマクロと同じです。

//iiiii スリップの切り換えマクロ

  定義した送りを実際に使う場合には、//in372

//list{
\selectslip{〈名前〉}
//}

というマクロを使います。
  たとえば、“honmon”という名前で定義したスリップで“\vbox”を作成する場合には、

//list2{
\vbox{\selectslip{honmon}
……
}
//}

とします。これで、行送りや左右マージン、段落インデントが設定通りに変更されます。なお、このスリップは、“\vbox”の先頭に指定するようにしてください。“\hbox”の中や“\vbox”の途中では、変更されません。

//iiii //in373小組

  EWBのマクロでは、同じ〈名前〉を持つコンポジットフォントとスリップを呼び出し、その前後に〈アキ〉を入れることで、小組を実現しています。そのため、コンポジットフォントとスリップを別々に定義し、“\//in374mkkogumi”マクロを使って前後のアキを指定し、小組を作成するようになっています。

//list{
\mkkogumi{〈名前〉}{〈アキ〉}
//}

  このマクロを使って環境名を定義すると、//LaTeXeの“\begin{環境名}〜\end{環境名}”環境と同じ形式で利用できます。

//list{
\begin{〈名前〉}
     :
\end{〈名前〉}
//}

  このように利用すると、“\begin〜\end”で囲った部分と本文との間に、指定した〈アキ〉がはいります。
  このマクロでは、指定した環境の前後にアキを入れるだけですが、この環境の文字組みは、囲った環境名として定義された書体が使われる規則になっています。つまり、

//list2{
\mkkogumi{kogumi}{…
//}

と定義した場合に、

//list2{
\begin{kogumi}
     :
\end{kogumi}
//}

と記述すると、囲った部分は“kogumi”という環境名のコンポジットフォントとスリップが利用されるようになっています。もし、コンポジットフォントの定義用マクロなどを定義しておかないと、

//list2{
! No such composit `kogumi'.
//}

といったエラーメッセージが表示されてしまいます。
  新しく小組を定義する場合には、通常は“\mkkogumi”、“\DeclareCompositFont”、“\newslip”の3つを定義します。たとえば、

//table[l(6w)l]{
環境名	kogumi
和文書体	見出しミン
欧文書体	Times-Roman
和文級数	18級
欧文級数	18級
字送り	17歯（1歯ツメ）
行送り	24歯
字上げ	1文字
字下げ	1文字
上下アキ	24歯
文字色
　シアン	0.0
　マゼンタ	0.0
　イエロー	0.0
　ブラック	1.0
//}

という小組を定義するには、次のように記述します。

//list2{
\mkkogumi{kogumi}{24H}
\DeclareCompositFont{kogumi}[0.0,0.0,0.0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{OT1/ptm/
m/n}[0.03zh]
\newslip{kogumi}{24H}{17H}{17H}{17H}
//}

  書体やスリップを定義しないで使用することもできます。

//list2{
\mkkogumi*{kogumi}{……
//}

のように“\mkkogumi”の後に“*”を付加すると、書体やスリップの定義が無い場合は“\begin{kogumi}”の直前の書体やスリップを使用します。


//iiii //in375箇条書

//iiiii 箇条書用マクロ

  箇条書は、小組と同様に、同じ名前を持つコンポジットフォントとスリップを呼び出し、その前後に〈アキ〉を入れることで実現します。そして、箇条書の場合にはさらに、
//k1{
・“\item”で、行頭を問答量だけ飛び出す事ができる
・“\item[〈見出し〉]”で、箇条書内の見出しを作ることができる
・見出し部分の書体を統一的に変更することができる
//}

といった機能が付加されています（//f030203）。

//f030203 箇条書のパラメータ

  この付加機能は、次のマクロで定義できるようベースファイルで設定されています。//in376

//list{
\mkkajyou{〈名前〉}{〈問答〉}[〈項目間アキ〉]{〈アキ〉}
//}

//k1{
//g{アキ//}
//|箇条書環境の前後にどれくらいのアキを入れるかを指定します。
//g{問答//}
//|“\item”命令を使った際の問答量を指定します。
//g{項目間アキ//}
//|カレントのスリップに指定されている行送りに、さらにどれくらいのアキを追加するのかを指定します。“\item”命令を使わない場合には、項目間のアキは影響しません。
//}

  箇条書環境は、ちょうど小組環境と同じ形式で、次のように記述できます。

//list{
\begin{箇条書の環境名}
     :
\end{箇条書の環境名}
//}

  使われる書体や行送りも、やはり小組同様、指定された環境名に定義されているものが用いられます。ただし、“\item[]”マクロを使って囲った部分については、“item@〈名前〉”という名称で定義されたコンポジットフォントが使われます。たとえば、

//table[l(6w)l]{
環境名	kajyoi
和文書体	見出しミン
欧文書体	Times-Roman
和文級数	18級
欧文級数	18級
字送り	17歯（1歯ツメ）
行送り	24歯
字上げ	1文字
字下げ	1文字
問答量	3文字
項目間アキ	2歯
上下アキ	24歯
文字色
　シアン	0.0
　マゼンタ	0.0
　イエロー	0.0
　ブラック	1.0
//}

という箇条書を定義するには、次のように記述します。

//list2{
\mkkajyou{kajyoi}{51H}[2H]{24H}
\DeclareCompositFont{kajyo}[0.0,0.0,0.0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{OT1/ptm/
m/n}[0.03zh]
\DeclareCompositFont{item@kajyo}[0.0,0.0,0.0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{OT1/
ptm/m/n}[0.03zh]
\newslip{kajyo}{24H}{17H}{17H}{17H}
//}

  \mkkakyouも\mkkogumiと同様に、

//list2{
\mkkajyou*{kajyoi}{……
//}

のように記述すると、書体やスリップが定義されていない場合には直前の書体やスリップが使用されます。

//iiiii //in377問答

  問答量を部分的に変更するマクロも定義されています。しかし、このマクロは、小組や箇条書マクロの代りとして使われることはありません。
このマクロは、次の形式で用います。

//list{
\begin{mondo}{〈問答〉}
     :
\end{mondo}
//}

  問答のマクロは、//f030204に示されているような利用形態となります。

//f030204 問答のパラメータ

//iiii //in378見出し

  見出しは、“\chapter”や“\section”などといったマクロを使って//TeXの原稿ファイルに記述します。さらに、このマクロの定義を行うために、

//k1{
・見出し文字列の定義マクロ
・見出し行取りや揃えの定義マクロ
//}

が用意してあります。

//iiiii 見出し文字列の定義マクロ

  見出しの文字列を定義するには、次のマクロを使います。//in379

//list{
\newsection{〈名前〉}[〈表記〉]{〈文字列〉}[〈上位構造〉]
//}

//k1{
//g{表記//}
//|番号の表記を指定します。ここに指定できる変数は、次に示すように//LaTeXeでページ番号の表記に用いるものと同じです。

//table[l(8w)l(5w)l(5w)]{
//bkei
	小文字	大文字
//tkei
算用数字	\arabic		
ローマ数字	\roman	\Roman
アルファベット	\alph	\Alph
//bkei
//}

  たとえば、見出しの番号をローマ数字にして印字したければ、

//list2{
\newsection{section}[\Roman]{…
//}

と指定します。何も指定しなかった場合には、算用数字“\arabic”となります。

//g{文字列//}
//|ナンバリングの方法を指定します。固定文字列や変数を使って出力方法を表します。また、この文字列は見出しの内容自身を示すものではありません。
//}

  この“\newsection”の〈文字列〉には、次のマクロを使ってナンバリング方法を記述します。

//k1{
//g{\the〈名前〉//}
//|下位構造やキャプション文字列の中で、カウンタの値を〈表記〉で表したものに置換されます。
//g{\THE〈名前〉//}
//|同じく、カウンタの値を〈文字列〉で表したものに置換されます。
//}

  カウンタの値というのは、対象としている見出しに付けられる番号で、章番号や節番号のことを表します。また、〈上位構造〉という引数には、カウンタの値をリセットするタイミングの見出しレベルを指定します。この指定の見出しレベルに達すると、新たに1から番号付けをはじめます。
  ここで、実際に小見出しのレベルを定義をしてみましょう。たとえば、節見出しでカウンタをリセットし、カウンタの前にはダイヤ記号を付けた見出しを定義するには、次のように記述します。

//list2{
\newsection{subsection}[\roman]{◆\thesubsection}[section]
//}

//iiiii 見出し行取りと起こしの定義

  本文に対して見出しの行取りなどを行うには、次のマクロを使います。//in380

//list{
\headsection{〈名前〉}[〈起こし〉]{〈前空き〉}%
            [〈問答〉]{〈本体高さ〉}[〈付き方〉]{〈後空き〉}[〈続ける本文行数〉]
//}

//k1{
//g{起こし//}
//|見出しのページ体裁を指定します。次に示すパラメータを組み合わせて指定することができます。

（起こし） := {t,p,P}[l,r]

//table[l(12w)l(12w)l(12w)]{
t : 改ページ起こし	tl : 左ページ起こし	tr : 右ページ起こし
p : 扉				pl : 扉左起こし		pr : 扉右起こし
P : 扉（裏白）		Pl : 扉（裏白）左起こし	Pr : 扉（裏白）右起こし
（省略）: 成行き
//}

  “t”を指定すると、新たに改ページを行って見出しを出力し、ノンブルや柱も印字されます。“p”を指定すると、改ページを行って見出しを出力し、そのページにはノンブルや柱は印字されません。“P”を指定すると改ページして見出しのみを出力し、さらに次のページを空けてから本文が始まります。“l”は左ページになるように、“r”は右ページに見出しが出力されるように改ページ処理されます。また、〈起こし〉に何も指定しないとなりゆきになります。
  たとえば、左ページ起こしの設定を行いたい場合には、

//list{
  …}[tl]{…
//}

と指定します。

//g{前空き／後空き//}
//|見出し本体の前後に何行のアキを入れるかを指定します。〈前空き〉や〈後空き〉は、〈本体高さ〉に追加されるアキです。〈前空き〉は、ページの切れ目では省略されてしまいます。さらに、〈起こし〉に何も指定しなかった場合にも、〈前空き〉は改ページされた位置で省かれます。もし、改ページ位置に〈前空き〉を残したい場合には、〈本体高さ〉に〈前空き〉のアキを追加した値に設定するようにしてください。
//g{本体高さ//}
//|見出しとして何行取りにするのかを指定します。ただし、行取りは前空きや後空きとはまったく別のもので、指定された行数を必ず確保します。また、行取りとして確保した領域内にどのように見出しを置くかは、次の引数である〈付き方〉で指定します。
//g{付き方//}
//|次のいずれかを指定することができます。

//table[l(2w)]{
t	〈本体〉の上端と文字列の上端が一致する
c	〈本体〉の中心と文字列の中心が一致する
b	〈本体〉の下端と文字列の下端が一致する
//}

//g{問答//}
//|見出しが複数行になった場合の問答量を指定します。たとえば、次のような場合には、見出しの文字列の長さを考慮して、折れる箇所の一番広い幅を指定するようにしてください。
//list{
1.2.1   見出し文字列
1.2.105 見出し文字列
//}

//g{続ける本文行数//}
//|改ページを起こさずに見出しの後に続けるべき本文行数を指定します。たとえば“2”を指定した場合、見出しの後の本文が見出しと同じページに2行分収まらなければ、見出しごと改ページします。
//}

  なお、見出しの書体は小組などと同じように、同じ環境名で定義されたコンポジットフォントが用いられます。たとえば、

//table[l(8w)l]{
環境名	subsection
和文書体	見出しミン
欧文書体	Times-Roman
和文級数	18級
欧文級数	18級
字送り	17歯（1歯ツメ）
行送り	17歯（1歯ツメ）
文字色
　シアン	0.0
　マゼンタ	0.0
　イエロー	0.0
　ブラック	1.0
行取り	2行
付き方	下付き
左右揃え	中心に揃える
前アキ	なし
後アキ	なし
表記	算用数字
文字列	節番号.小見出し番号
問答	なし
続ける本文行数	2行
//}

という見出しの定義は、

//list2{
\newsection{subsection}[\arabic]{\thesection.\thesubsection}[section]
\headsection{subsection}{0\Vokuri}[0\hokuri]{2\Vokuri}[b]{0\Vokuri}[2]
\DeclareCompositFont{subsection}[0.0,0.0,0.0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{OT1/
ptm/m/n}[0.1zh]
\newslip{subsection}[c]{17H}{0H}{0H}{0H}
//}

という記述になります。

  見出しには、EPS画像を使用することもできます。この場合、文字だけの見出しと比べて指定方法が大きく異なります。
  EPS画像を使用する場合、用意するEPS画像にちょっとした細工を施しておく必要があります。見出し番号や見出し文字列が入る箇所に“タグ”と呼ばれる文字列を書いておき、出力時に“タグ”文字列を実際の見出し番号や見出し文字列に自動的に置き換えて出力する、という方法を取ります。このとき、画像中のタグ文字列の書体は実際の出力には関係しません。
  EPS画像を使用する見出しには以下のマクロを使用します。//in601//in602//in603

//list{
\makeheadeps{〈名前〉}[〈EPS拡大率〉](〈EPS幅〉,〈EPS高さ〉){〈EPSファイル名〉}
% 番号部指定
\setheadpsfrag{〈名前〉}{num}{〈番号タグ名〉}[〈番号基準位置〉]%
              [〈番号タグ基準位置〉][〈番号拡大率〉][〈番号角度〉]
\setheadstrbox{〈名前〉}{num}{〈番号幅〉}[〈縦横〉][〈番号の折り返し〉]%
              [〈長体幅〉][〈段落形態〉]
% 文字列部指定
\setheadpsfrag{〈名前〉}{str}{〈文字列タグ名〉}[〈文字列基準位置〉]%
              [〈文字列タグ基準位置〉][〈文字列拡大率〉][〈文字列角度〉]
\setheadstrbox{〈名前〉}{str}{〈文字列幅〉}[〈縦横〉][〈文字列の折り返し〉]%
              [〈長体幅〉][〈段落形態〉]
//}

  \setheadpsfrag, \setheadstrboxの2つのマクロは見出しの番号部分と文字列部分をそれぞれ指定します。

//k1{
//g{EPS拡大率／幅／高さ//}
//|EPS画像の大きさです。拡大率と幅／高さでは拡大率が優先します。拡大率が0の場合、幅／高さで指定された大きさで出力されます。幅または高さが0の場合、0でない方に合わせて縦横比を保ったまま大きさが変化します。いずれも0の場合は、原寸大で出力されます。拡大／縮小した場合、出力される見出し番号や見出し文字列も拡大／縮小されるので注意してください。
//g{EPSファイル名//}
//|出力するEPSファイル名を指定します。
//g{//in604タグ名//}
//|EPS画像中の見出し番号や見出し文字列が出力される箇所に書いてある文字列を指定します。これらのタグ文字列には日本語は使用できません。
//g{番号／文字列基準位置//}
//|実際に出力される見出し番号や文字列の位置揃えの基準点を指定します。上下の基準点と左右の基準点の2文字で書き表します。
//table{
上下位置：
t	上端に揃える
c	中心に揃える
b	下端に揃える
B	文字列のベースラインに揃える
左右位置：
l	左端に揃える
c	中心に揃える
r	右端に揃える
//}
//g{タグ基準位置//}
//|タグ文字列のどこを基準点にするかを指定します。指定は番号／文字列基準位置と同様に2文字で指定します。
//g{番号／文字列拡大率//}
//|実際に出力される見出し番号や文字列の拡大率を指定します。
//g{番号／文字列角度//}
//|実際に出力される見出し番号や文字列を回転させる角度を指定します。
//g{番号／文字列幅//}
//|見出し番号や文字列の折り返し幅を指定します。
//g{縦横//}
//|見出し番号や文字列の組方向を指定します。“y”で横組、“t”で縦組になります。
//g{折り返し//}
//|見出し番号や文字列が指定された幅を超えた場合、折り返すかどうかを指定します。“t”で折り返し有り、“f”で折り返し無しです。
//g{長体幅//}
//|番号／文字列幅を超えた場合に、この幅までなら折り返さないで長体を掛けて圧縮し、指定幅に収める、という限度の幅を指定します。つまり、指定幅を最大圧縮率で割った値になります。
//g{//in605段落形態//}
//|折り返した場合の段落の形を//TeXマクロの\parshapeの引数の形で指定します。通常は指定する必要はありません。
//}

  実際に使用する場合、書体の指定も番号部と文字列部の2つの書体とスリップを指定する必要があります。EPS画像が拡大／縮小された場合、書体級数や行送りは一緒に拡大／縮小されます。

  EPS画像を利用した見出しの指定は、

//table[l(10w)l]{
環境名	chapter
番号和文書体	見出しミン
番号欧文書体	Times-Roman
番号和文級数	20級
番号欧文級数	20級
番号字送り	20歯
文字列和文書体	見出しミン
文字列欧文書体	Times-Roman
文字列和文級数	18級
文字列欧文級数	18級
文字列字送り	17歯（1歯ツメ）
文字列行送り	22歯
文字色
　シアン	0.0
　マゼンタ	0.0
　イエロー	0.0
　ブラック	1.0
起こし	左ページ起こし
行取り	5行
付き方	下付き
前アキ	なし
後アキ	1行
表記	算用数字
番号文字列	第〈見出し番号〉章
続ける本文行数	2行
EPSファイル名	chapter.eps
拡大率	80%
番号タグ名	@n@
番号基準位置	左、ベースライン揃え
番号タグ基準位置	左、ベースライン揃え
番号拡大率	100%
番号角度	0度
番号幅		5字
番号組方向		横組
番号の折り返し	無し
文字列タグ名	@str@
文字列基準位置	左、ベースライン揃え
文字列タグ基準位置	左、ベースライン揃え
文字列拡大率	100%
文字列角度	0度
文字列幅		20字
文字列組方向		横組
文字列の折り返し	有り
文字列の最大長体率	80%まで許容する
//}

という見出しの場合、

//list2{
\newsection{chapter}[\arabic]{第\thechapter 章}
\headsection{chapter}[tl]{0\Vokuri}{5\Vokuri}[b]{1\Vokuri}[2]
\makeheadeps{chapter}[0.8](0.00mm,0.00mm){chapter.eps}
\setheadpsfrag{chapter}{num}{@n@}[Bl][Bl][1.0][0]
\setheadstrbox{chapter}{num}{5\hokuri}[y][f]
\setheadpsfrag{chapter}{str}{@str@}[Bl][Bl][1.0][0]
\setheadstrbox{chapter}{str}{20\hokuri}[y][t][25\hokuri]
\DeclareCompositFont{num@chapter}[0.0,0.0,0.0,1.0]{25Q}{JY1/mmc/m/n}[25Q]{OT1/
ptm/m/n}[0.03zh]
\DeclareCompositFont{str@chapter}[0.0,0.0,0.0,1.0]{22.5Q}[21.25H]{JY1/mmc/m/n}[22.5Q]
{OT1/ptm/m/n}[0.03zh]
\newslip{num@chapter}[l]{27.5H}{\z@}{\z@}{\z@}
\newslip{str@chapter}[l]{27.5H}{\z@}{\z@}{\z@}
//}

となります。
  EPS画像を使用する場合には、上記のように、同時にnum@〈環境名〉、str@〈環境名〉の2種類の書体とスリップを定義しておく必要があります。また、この例では画像を80%に縮小しているため、書体級数や字送り、行送りをその分拡大して指定しておく必要があります。

//iiiii 行取りボックス

  見出しを定義する際に絶対に必要となるマクロではありませんが、行取りを行いやすくするためのツール的なマクロを定義してあります。//in381

//list{
\sec@box{〈行数〉}{〈本体〉}
//}
//k1{
//g{行数//}
//|確保したい行数を、“3\Vokuri”というように指定します。
//g{本体//}
//|自由な命令や文字列が書けます。なお、〈本体〉は”//tt{\vbox//}”で囲まれて処理されます。
//}

//iiii //in606目次

  目次は見出しと関連して定義されます。目次項目には囲み罫を使用できます。指定された見出しから抽出された目次情報を組版するための定義を、以下のマクロを使って行います。//in607

//list{
\newtoc{〈名前〉}{〈リーダ体裁〉}{〈左空き〉,〈上空き〉,〈右空き〉,〈下空き〉}%
       [〈背景色〉]{〈左上角半径〉,〈右上角半径〉,〈右下角半径〉,〈左下角半径〉}%
       [〈罫線色〉]{〈左罫太さ〉,〈上罫太さ〉,〈右罫太さ〉,〈下罫太さ〉}%
       {〈前空き〉}{〈後空き〉}
//}

//k1{
//g{名前//}
//|目次に出力する見出しの環境名です。
//g{リーダ体裁//}
//|目次中の見出し文字列とページ番号の間に挿入するリーダの体裁を指定します。
//g{上下左右空き//}
//|囲み罫の内側の空きを指定します。
//g{背景色//}
//|囲み罫の内側の地の色をCMYK形式で指定します。
//g{角半径//}
//|囲み罫の角を丸める場合の半径を指定します。0を指定すると直角になります。
//g{罫線色//}
//|囲み罫の罫線色をCMYK形式で指定します。
//g{罫太さ//}
//|上下左右の罫線の太さを指定します。
//g{前後空き//}
//|囲み罫の外側の空きを指定します。
//}

  また、目次に使用する見出しについて、目次情報を抽出しておくために次の宣言をしておきます。

//list{
\〈見出し名〉labeltrue
//}

  また、目次書体については見出し番号と文字列部分のコンポジットをtoc@〈見出し名〉、ページ番号のコンポジットをpage@〈見出し名〉で定義しておきます。行送り、字上げ／字下げ、問答はtoc@〈見出し名〉というスリップで定義します。
  たとえば、

//table[l(12w)l]{
見出し名	chapter
見出し文字列和文書体	見出しミン
見出し文字列欧文書体	Times-Roman
見出し文字列和文級数	18級
見出し文字列欧文級数	18級
見出し文字列字送り	18歯
ページ書体	Times-Roman
ページ級数	15級
文字色
　シアン	0.0
　マゼンタ	0.0
　イエロー	0.0
　ブラック	1.0
行送り	22歯
問答	4字
字上げ	0字
字下げ	0字
前空き	1行
後空き	0行
リーダ	3点リーダ
囲み罫
　角半径	すべて0（直角）
　上罫太さ	0.5mm
　下罫太さ	0.5mm
　左右罫太さ	0mm
　上空き	1mm
　下空き	1mm
　左右空き	0mm
罫線色
　シアン	0.0
　マゼンタ	0.0
　イエロー	0.0
　ブラック	0.5
背景色
　シアン	0.0
　マゼンタ	0.0
　イエロー	0.0
　ブラック	0.0
//}

のような目次項目の指定は、

//list2{
\chapterlabeltrue
\newtoc{chapter}{\hskip0pt\hbox{}\nobreak\cleaders\hbox{$\m@th \mkern1.5mu\cdot
\mkern1.5mu$}\hskip5mm plus1fill}{0mm,1mm,0mm,1mm}[0,0,0,0]{0mm,0mm,0mm,0mm}[0,
0,0,0.5]{0mm,0.5mm,0mm,0.5mm}{1\Vokuri}{0\Vokuri}
\DeclareCompositFont{toc@chapter}[0.00,0.00,0.00,1.00]{18Q}[18H]{JY1/mmc/m/n}
{OT1/ptm/m/n}
\DeclareCompositFont{page@chapter}[0.00,0.00,0.00,1.00]{18Q}[18H]{JY1/mmc/m/n}
{OT1/ptm/m/n}
\newslip{toc@chapter}{22H}{4\hokuri}{0\Hokuri}{0\Hokuri}
//}

のようになります。
  これらの指定により、以下のコマンドが生成されます。

//list{
\TOC〈見出し名〉{〈見出し番号〉}
\TOCSTR〈見出し名〉{〈見出し文字列〉}
\TOCPAGE〈見出し名〉{〈見出しラベル〉}
//}

  見出しラベルは\〈見出し名〉labeltrueを指定したことで自動生成されるラベル名で、\TOCPAGE〈見出し名〉で使用することでページ番号に変換されます。このラベルと見出しの対応はWork/*.rogというファイルに記述されています。
  実際の記述は以下のようになります。

//list2{
\TOCchapter{第1章}\TOCSTRchapter{電子編集とは}\TOCPAGEchaper{1-10002}
//}

//iiii //in509体裁

  ベースファイルには、体裁指定を行う命令として、

//k1{
・版面設定
・柱／ノンブル設定
//}

のマクロが定義されています。用紙サイズや基本的な版面の設定と、柱やノンブルを出力する位置を自由に決められるようになっています。

//iiiii 版面

  ページの//in382版面と//in383用紙サイズ、さらに//in384ノド側マージンと//in385天側マージンを定義するには、次のマクロを使います。//in608//in389

//list{
\defpage{〈字詰め〉}{〈行数〉}%
         {〈ページ幅〉}{〈ページ高さ〉}{〈ノド〉}{〈トップ〉}
\def\EWB@begindvi{\special{papersize=〈ページ幅+50mm〉,〈ページ高さ+50mm〉}}
//}
//k1{
//g{字詰め／行数//}
//|版面の文字数と行数を指定します。ただし、行数には実際の版面の行数よりも1行少ない行を指定してください。
//g{ページ幅／ページ高さ//}
//|用紙の縦横サイズを指定します。指定する単位は、“mm”あるいは“H”です。
//g{ノド／トップ//}
//|用紙サイズから版面までの天側とノド側からの距離を指定します。
//}

  \def\EWB@begindvi{…}はPostScroptに変換したときのページ位置調整のための宣言です。
  たとえば、用紙サイズが縦257mm×横182mmで、

//table[l(6w)]{
字詰め	43字
行数	35行
トップ	24.75mm
ノド	23mm
//}

という体裁を設定する場合には、

//list2{
\defpage{43\Hokuri}{34\Vokuri}{182mm}{257mm}{23mm}{24.75mm}
\def\EWB@begindvi{\special{papersize=232mm,307mm}}
//}

というマクロを記述すれば設定できます。

//iiiii 柱／ノンブル

  //in386柱および//in387ノンブルには、出力する位置と体裁の2つのマクロが用意されています。スリップやコンポジットフォントと同様に、柱とノンブルも名前を付けて（この場合には、環境名ではなく、スタイル名と呼んでいる）、ひとまとめにして管理するようになっています。
  柱およびノンブルを出力する位置は、次のマクロを用いて定義します。//in388

//list{
\newstyle{〈スタイル名〉}(x,y)[〈L ハシラ POS〉](x,y)[〈L ノンブル POS〉]%
                         (x,y)[〈R ハシラ POS〉](x,y)[〈R ノンブル POS〉]
//}

  “(x,y)”と“[〈〜POS〉]”は、それぞれ組みになっています。“(x,y)”には、その後ろに指定した“〈〜POS〉”を出力する位置を数値で指定します。

//k1{
//g{LハシラPOS、LノンブルPOS、RハシラPOS、RノンブルPOS//}
//|付き方のいずれかの項目を指定します。
//}

  付き方には次のようなものがあります。

//table[l(2w)l(8w)l(2w)l(8w)]{
l	左ツキ		c	中ツキ
r	右ツキ		n	ハシラなし
//}

  左／右／中央という位置は、実際に柱やノンブルとして出力する文字列を四角いボックスと考えて、そのボックスのどの部分を、指定した“(x,y)”の位置に合わせるかということです。たとえば、左ツキの“l”を記述した場合には、ボックスの左下隅が指定した“(x,y)”の位置にくるように出力されます。
位置指定の他にも、柱の文字列定義をしなければなりません。柱の文字列を定義するには、次のマクロを使います。//in390

//list{
\headingstyle{〈スタイル名〉}[〈左右〉]{〈構造名〉}[〈ハシラ文字列〉]
//}

//k1{
//g{左右//}
//|“l”か“r”を指定します。左ページ／右ページの意味です。
//g{構造名//}
//|見出しの環境名を指定します。指定した環境名の文字列が柱に出力されます。
//}

  たとえば、次のように定義します。

//list2{
\headingstyle{ewbstyle}[l]{chapter}
\headingstyle{ewbstyle}[r]{section}
//}

  この場合には、左ページには章見出しの文字列が、右ページには節見出しの文字列が出力されることになります。
  さらに、ノンブルに出力する数字や文字列を定義するには、次のマクロを使います。//in391

//list{
\nombrestyle{〈スタイル名〉}[〈表記〉]{〈左頁文字列〉}{〈右頁文字列〉}
//}

//k1{
//g{表記//}
//|見出し定義の時に利用した同じ命令を記述し、ノンブルの数字表記を指定します。
//g{左頁文字列／右頁文字列//}
//|ノンブルとしてどのような数字や文字列を出力するのか指定します。
//}

  たとえば、左右ページに“-198-”という形式で出力するには、

//list2{
\nombrestyle{ewbstyle}[\arabic]{--\thepage--}{--\thepage--}
//}

と記述します。このマクロの中で使われている“\thepage”は、そのページ番号を表す//LaTeXeの変数です。
  なお、柱とノンブルの書体は、次のコンポジットフォントがそれぞれ使われるようになっています。そのため、“\DeclareCompositFont”もしくは“\copycomposit”マクロを用いて、事前に定義して置かなければなりません。

//table[l(7w)l(12w)l(12w)]{
//bkei
	左ページ用			右ページ用
//tkei
ノンブル書体	Lnombre@〈スタイル名〉		Rnombre@〈スタイル名〉
柱書体		Lrunning@〈スタイル名〉		Rrunning@〈スタイル名〉
//bkei
//}

  また、これらの柱およびノンブルには罫線またはEPS画像による飾りを付けることが可能です。
  罫線で//in609修飾する場合は次のマクロを使用します。//in610

//list{
\addruletostyle{〈スタイル名〉}{〈左右〉}(x,y)[〈揃え〉][〈罫線色〉]%
               {〈長さ〉}{〈高さ〉}{〈深さ〉}
//}

//k1{
//g{(x,y)//}
//|原点からの位置を指定します。
//g{左右//}
//|左右のどちらのページに対する修飾かを指定します。“L”で左、“R”で右ページです。
//g{揃え//}
//|指定した位置に対する左右揃えを指定します。“l”で左、“c”で中央、“r”で右揃えになります。
//g{長さ／高さ／深さ//}
//|罫線のサイズを指定します。
//}

  EPS画像で修飾する場合は次のマクロを使用します。//in611

//list{
\addepstostyle{〈スタイル名〉}{〈左右〉}(x,y)[〈揃え〉][〈拡大率〉]%
               (〈幅〉,〈高さ〉){〈EPSファイル名〉}
//}

//k1{
//g{拡大率／幅／高さ//}
//|EPS画像の大きさです。拡大率と幅／高さでは拡大率が優先します。拡大率が0の場合、幅／高さで指定された大きさで出力されます。幅または高さが0の場合、0でない方に合わせて縦横比を保ったまま大きさが変化します。いずれも0の場合は、原寸大で出力されます。
//g{EPSファイル名//}
//|出力するEPSファイル名を指定します。
//}

  \addruletostyleや\addepstostyleは１つのページスタイルに対して複数指定することができます。このため、罫線を組み合わせて囲み罫のようにして使用することも可能です。EPS画像を飾りに使用した場合、PS化された組版ファイルにはページ毎にEPSファイルが組み込まれることになるため、ファイルサイズが非常に大きくなってしまうおそれがありますので注意してください。

  このように設定した柱およびノンブルのスタイルは、次のマクロを用いて、//TeXに対して明示的に利用することを伝えておかなければなりません。そのためのマクロは、//LaTeXeに用意されているものと同じで、//in392

//list{
\pagestyle{〈スタイル名〉}
//}

を使います。そのため、たとえば“ewbstyle”というスタイル名で柱とノンブルを定義した場合には、次のように指定します。

//list2{
\pagestyle{ewbstyle}
//}

  また、ある見出しのページにのみ使用する場合は、//in612

//list{
\setstyle*{〈見出し名〉}{〈スタイル名〉}
//}

を宣言しておきます。
  同じ見出しに\setstyleと\setstyle*で異なるスタイルを指定した場合、見出しの有るページでは\setstyle*で指定したスタイルが、見出し以降のページでは\setstyleで指定したスタイルが使用されます。

//iiii //in393脚注

  脚注の定義を行うために、ベースファイルには、

//k1{
・//|脚注のアキ指定
・//|脚注の体裁指定
//}

のマクロが用意されています。

//iiiii 脚注のアキ指定

  脚注と脚注や本文と脚注のアキなど、脚注に関連したアキは、次のマクロを用いて指定します。//in394

//list{
\formatfootnote{〈本文-脚注アキ〉}[〈脚注罫線〉]{〈脚注-脚注アキ〉}
//}

//k1{
//g{本文-脚注アキ//}
//|本文と脚注のアキを指定します。
//g{脚注罫線//}
//|本文と脚注の間に引かれる罫線を指定します。//TeXの罫線命令を指定することができます。
//g{脚注-脚注アキ//}
//|脚注が複数続く場合の脚注間のアキを指定します。
//}

//iiiii 脚注の体裁指定

  脚注の体裁を指定するには、次のマクロを使います。//in395

//list{
\newfootnote{〈名前〉}[〈表記〉]{〈本文マーク〉}
                      [〈問答〉]{〈脚注マーク〉}[〈上位カウンタ〉]
//}

//k1{
//g{表記//}
//|見出しと同様に、カウンタ番号の表現形式を指定します。
//g{本文マーク／脚注マーク//}
//|カウンタ番号の他に、アスタリスクなどの記号を付ける場合には、マークを指定します。
//g{問答//}
//|脚注が長くて複数行になる場合の問答量を指定します。
//g{上位カウンタ//}
//|見出しのどのレベルで脚注番号のカウンタをリセットするかを指定します。
//}

  たとえば、本文と脚注のアキを“24H”にし、版面一杯の罫線を引いて、脚注間のアキを“13H”にしたければ、

//list2{
\formatfootnote{24H}[\vrule height.1mm depth0pt width\textwidth]{13H}
//}

と定義します。また、問答が3文字で、“注1”のような記号を脚注に付け、本文にはアスタリスクと脚注番号を出力したければ、

//list2{
\newfootnote{footnote}[\arabic]{\inhibitglue$^{*\@thefnmark }$}%
                      [3\hokuri]{注\@thefnmark}
//}

と定義するだけです。もちろん、脚注も名前のついた環境となるため、脚注に使われる書体はコンポジットフォントとして、定義しておかなければなりません。

//iiii //in396参照

  //TeXでは図表類を取り扱うマクロとして、次のマクロがベースファイルに定義されています。

//k1{
・参照項目のアキ／キャプション設定
・フロート設定
・非フロート設定
・レイアウト設定
//}

  次に、それぞれのマクロを見てみましょう。

//iiii 参照項目のアキ／キャプション設定

  参照する項目に対して、統一したアキを設定することができ、参照番号とキャプションを出力するためのマクロが備わっています。
  参照される図表類の前後のアキは、次のマクロを用いて定義します。//in397

//list{
\formatfloat{〈名前〉}{〈t-t(b-b)アキ〉}{〈t-(-b)アキ〉}{〈hアキ〉}%
            {〈-pアキ〉}{〈p-pアキ〉}{〈p-アキ〉}
//}

  スリップやコンポジットフォント同様に、アキの設定も、やはり名前を付けて管理するようになっています。
  “t、b、p、h”をプレフィックスに付けたアキを設定するようになっており、これは、図表類を物理属性エディタでフロート指定した場合の“TOP、BOTTOM、PAGE、HERE”に相当します。〈hアキ〉には、“here”でフロートした際に挿入される前後のアキを指定し、〈t-t(b-b)アキ〉には“top”もしくは“bottom”にフロートする図表の前後に挿入されるアキを指定します。また、〈t-(-b)アキ〉には“top”もしくは“bottom”にフロートした図表と本文との間に挿入されるアキを指定します。このアキの単位は、“mm”あるいは“H”を用います。
  キャプションは、//LaTeXeに備わっているキャプション命令を再定義して、〈ラベル〉の定義ができるようになっています。キャプションは、次のマクロを使って出力します。//in398

//list{
\caption{〈キャプション〉}[〈ラベル〉-〈枝番〉]
//}

  また、指定した文字列による参照を行う場合には、“\ref”マクロを使います。このマクロには2通りの記述形式があります。//in399

//list{
\ref{〈ラベル〉}
//}

  もしくは、

//list{
\ref[〈ラベル〉-〈枝番〉]
//}

です。たとえば、

//list2{
\caption{……}[chap01.title]
//}

というようなキャプションを用いて、そのキャプションの付いた図表を参照する場合には、

//list2{
\ref[chap01.title]
//}

と入力すれば、原稿中のどこに書かれていても、正しく参照番号が出力されます。
  また、参照時の書体変更には、次のような“fref@〜”と“ref@〜”で定義されたコンポジットフォントが使われます。
//table[l(11w)]{
はじめて参照する場合	「fref@〈カレントコンポジット〉」
2度目以降の参照		「ref@〈カレントコンポジット〉」
//}

//iiiii //in401フロート設定

  フロートする図表類の要素を定義するには、次のマクロを使います。//in400

//list{
\newfloat{〈名前〉}[〈表記〉]{カウンタ名}{〈文字列〉}%
         {〈枝文字列〉}[〈上位カウンタ〉]
//}
//k1{
//g{文字列／枝文字列//}
//|枝番号が付かない場合と枝番号が付く場合のフロート図表を表す文字列を指定します。どちらにも、フロート番号“\the〈名前〉”や“\thechapter”などといったカウンタが使えます。〈枝文字列〉の指定の中では、”//tt{\thesubnumber//}”が枝番号に置換されるようになっています。
//g{カウンタ名//}
//|カウンタとして利用する変数名を指定します。
//g{上位カウンタ//}
//|カウンタをリセットするタイミングを見出しのレベルで指定します。
//}

  たとえば、図専用のフロートを“figure”という名前にして、図番号を“図1.3”というような出力にするには、

//list2{
\newfloat{figure}{figure}{図\thechapter.\thefigure}%
       {図\thechapter.\thefigure（\thesubnumber）}[chapter]
//}

と定義すればよいのです。

//iiiii //in402非フロート設定

  プログラムのリストなど、フロートせずに参照されるものを定義するには、次のマクロを使います。//in403

//list{
\newreferred{〈名前〉}[〈表記〉]{カウンタ名}%
            {〈文字列〉}{〈枝文字列〉}[〈上位カウンタ〉]
//}

  使い方はフロートと同じで、“\caption”もそのまま利用できます。しかし、“\newreferred”は、

//k1{
・必ずhereにはいる。オプション指定は無視される
//|途中でページブレークが可能である
・キャプションと本体の揃えは、レイアウト設定のマクロで行える”//tt{{ud}[tcb]//}”しか許されない
・キャプションと本体の順番は、原稿中に書かれている順番になる
・アタリ罫を引けない
//}

といった違いがあります。
  たとえば、参照時に出力する文字列を“リスト1.19”というようにする場合には、

//list2{
\newreferred{source}{source}{リスト\thechapter.\thesource}%
    {リスト\thechapter.\thesource（\thesubnumber）}[chapter]
//}

とマクロ定義します。

//iiiii レイアウト設定

  参照される図表類の本体とキャプションをレイアウトするには、次のマクロを使います。フロートしない場合には反映されないパラメータがありますので注意が必要です。
  縦横の大きさが事前にわかっている一定のボックス型をした図表類に対しては、次のマクロを使ってレイアウトを行うと便利です。//in404

//list{
\layoutfloat*(w,h){〈キャプション幅〉}{〈揃え〉}{〈アキ〉}
//}

  また、フロートせずにページで自由に切れる図表類に対しては、次のマクロを使います。

//list{
\layoutfloat*[本体幅]{〈キャプション幅〉}{〈揃え〉}{〈アキ〉}
//}

//k1{
//g{アスタリスク“*”//}
//|マクロ名のあとにアスタリスクを付けると、アタリ罫を引きます。
//g{アキ//}
//|本体とキャプションとのアキを指定します。
//g{(w,h)//}
//|図表類の横“w”と縦“h”のサイズを指定します。単位は“mm”あるいは“H”で指定します。
//g{本体幅//}
//|図表類の横の大きさを指定します。
//g{揃え//}
//|“{u,d,l,r}[t,c,b]”の中から、それぞれの揃えを選択して指定します。
//}
//table[l(2w)l(10w)l(2w)l]{
u	上キャプション	t	左揃え（u、d）または上揃え（l、r）
d	下キャプション	c	中心揃え
l	左キャプション	b	右揃え（u、d）または下揃え（l、r）
r	右キャプション
//}

  なお、アタリ罫の太さも変更できるようになっており、

//list{
\lorulewidth=〈アタリ罫の太さ〉
//}

という変数に値を設定すれば、任意の太さに変えられます。

//iiii //in405キートップの定義

  キートップを定義するには、次のマクロを使います。//in406

//list{
\newkeytop*{〈名前〉}{〈横サイズ〉}{〈縦サイズ〉}{〈行送り〉}
//}

//k1{
//g{アスタリスク“*”//}
//|オプションで指定すると角丸型のキートップを定義することになります。指定しなければ、直角型のキートップを定義します。ただし、縦組では、角丸のキートップは使えません。
//g{横サイズ//}
//|キートップの横サイズを指定します。
//g{縦サイズ//}
//|キートップの縦サイズを指定します。
//g{行送り//}
//|キートップの文字列が2行になる場合の行送りを指定します。
//}

  キートップを使う場合には、

//list{
\〈名前〉{〈キーの文字列〉}
//}

を用います。〈キーの文字列〉には、〈名前〉として定義されたコンポジットフォントが使われます。

//list2{
\newkeytop*{keyii}{24H}{12H}{12H}
\DeclareCompositFont{keyii}{…
//}

//iiii //in614罫線

  罫線を定義するには、次のマクロを使います。//in613

//list{
\newkei{〈名前〉}[〈罫線色〉]{〈長さ〉}{〈太さ〉}{〈前空き〉}{〈後空き〉}
//}

//k1{
//g{長さ//}
//|罫線の長さ（横サイズ）を指定します。
//g{太さ//}
//|罫線の太さ（縦サイズ）を指定します。
//g{前／後空き//}
//|罫線の前後の文章との空きを指定します。
//}

  この罫線はそれだけで1行分として扱われます。改行無しで前後に文章を続けることはできません。

//iiii //in615囲み罫

  囲み罫は、ページで分割するものと分割しないものが作れるようになっています。分割する囲み罫はフロートする図表として使用できません。
  ページ分割しない囲み罫を定義するには、次のマクロを使います。//in616

//list{
\newkakomikei{〈名前〉}%
    {〈罫外字下げ〉,〈罫外前空き〉,〈罫外字上げ〉,〈罫外後空き〉}%
    {〈罫内左空き〉,〈罫内上空き〉,〈罫内右空き〉,〈罫内下空き〉}%
    [〈罫内背景色〉]%
    {〈左上角半径〉,〈右上角半径〉,〈右下角半径〉,〈左下角半径〉}%
    [〈罫線色〉]%
    {〈左罫太さ〉,〈上罫太さ〉,〈右罫太さ〉,〈下罫太さ〉}
//}

//k1{
//g{罫外字上げ／字下げ//}
//|版面と左右罫線との空きを指定します。
//g{罫外前後空き//}
//|本文と上下罫線との空きを指定します。
//g{罫内上下左右空き//}
//|罫線と罫内文章との空きを指定します。
//g{角半径//}
//|四隅の角を丸める場合の半径を指定します。0であれば直角になります。
//g{罫内背景色//}
//|罫線内の背景色をCMYK形式で指定します。
//g{罫線色//}
//|罫線色をCMYK形式で指定します。
//g{罫太さ//}
//|上下左右の罫線の太さを指定します。
//g{罫内行幅//}
//|罫線内の文章の行幅を指定します。
//}

  ページ分割する囲み罫の場合は次のようなマクロで指定します。//in617//in618

//list{
\DeclareWaku{〈名前〉}%
  {〈罫外前空き〉}{〈罫外後空き〉}{〈罫外字下げ〉}{〈罫外字上げ〉}%
  {〈罫内上空き〉}{〈罫内下空き〉}{〈罫内左空き〉}{〈罫内右空き〉}
\DeclareWakuFrame{wakui}{all}{〈枠定義〉}
\DeclareWakuFrame{wakui}{head}{〈枠定義〉}
\DeclareWakuFrame{wakui}{body}{〈枠定義〉}
\DeclareWakuFrame{wakui}{tail}{〈枠定義〉}
//}

//k1{
//g{罫外前後空き／字上げ／字下げ//}
//|罫線の外側の空きを指定します。空きの大きさは前空きが\innertopskip、後空きが \innerbottomskip、字下げが\innerleftskip,字上げが\innerrightskipという変数に保存されます。
//g{枠定義//}
//|実際に出力される囲み罫の体裁をページ分割の形態毎に指定します。
//|ページ分割の形態として
//table[l(5w)]{
all	ページ分割が起こらない場合
head	ページ分割した場合の最初のページの囲み罫
body	ページ分割した場合の中間のページの囲み罫
tail	ページ分割した場合の最後のページの囲み罫
//}
の4通りがあります。
//|それぞれの形態毎に、
//list{
  \begin{ascpsbox}%
    {〈罫内左空き〉,〈罫内上空き〉,〈罫内右空き〉,〈罫内下空き〉}%
    [〈罫内背景色〉]%
    {〈左上角半径〉,〈右上角半径〉,〈右下角半径〉,〈左下角半径〉}%
    [〈罫線色〉]%
    {〈左罫太さ〉,〈上罫太さ〉,〈右罫太さ〉,〈下罫太さ〉}%
    \unvbox\Wakubox%
  \end{ascpsbox}
//}
//|のように、囲み罫の形を定義します。
//|罫内空きは\DeclareWakuboxでも定義しますが、こちらで定義したものが優先されます。
//}

  たとえば、
//table[l(8w)l]{
環境名	wakui
上罫太さ	1.0mm
下罫太さ	1.0mm
左罫太さ	1.0mm
右罫太さ	1.0mm
左上角半径	3.0mm
右上角半径	3.0mm
右下角半径	3.0mm
左下角半径	3.0mm
外前空き	1.0行
外後空き	1.0行
外字上げ	0.0字
外字下げ	0.0字
内前空き	1.0行
内後空き	1.0行
内字上げ	0.0字
内字下げ	0.0字
下端罫太さ	0.0mm
下端右下角半径	0.0mm
下端左下角半径	0.0mm
下端内後空き	0.5行
上端罫太さ	0.0mm
上端左上角半径	0.0mm
上端右上角半径	0.0mm
上端内前空き	0.5行
罫線色
　シアン	0.00
　マゼンタ	0.00
　イエロー	0.00
　ブラック	1.00
背景色
　シアン	0.00
　マゼンタ	0.00
　イエロー	0.00
　ブラック	0.10
//}
のような囲み罫を作る場合は、

//list2{
\DeclareWaku{wakui}%
  {1.00\Vokuri}{1.00\Vokuri}{0.00\Hokuri}{0.00\Hokuri}%
  {1.00\Vokuri}{1.00\Vokuri}{0.00\Hokuri}{0.00\Hokuri}%
\DeclareWakuFrame{wakui}{all}{%
  \begin{ascpsbox}%
    {0.00\Hokuri,1.00\Vokuri,0.00\Hokuri,1.00\Vokuri}%
    [0.00,0.00,0.00,0.10]%
    {3.00mm,3.00mm,3.00mm,3.00mm}%
    [0.00,0.00,0.00,1.00]%
    {1.00mm,1.00mm,1.00mm,1.00mm}%
    \unvbox\Wakubox%
  \end{ascpsbox}}
\DeclareWakuFrame{wakui}{head}{%
  \begin{ascpsbox}%
    {\innerleftskip,\innertopskip,\innerrightskip,0.50\Vokuri}%
    [0.00,0.00,0.00,0.10]%
    {3.00mm,3.00mm,0.00mm,0.00mm}%
    [0.00,0.00,0.00,1.00]%
    {1.00mm,1.00mm,1.00mm,0.00mm}%
    \unvbox\Wakubox%
  \end{ascpsbox}}
\DeclareWakuFrame{wakui}{body}{%
  \begin{ascpsbox}%
    {\innerleftskip,0.50\Vokuri,\innerrightskip,0.50\Vokuri}%
    [0.00,0.00,0.00,0.10]%
    {0.00mm,0.00mm,0.00mm,0.00mm}%
    [0.00,0.00,0.00,1.00]%
    {1.00mm,0.00mm,1.00mm,0.00mm}%
    \unvbox\Wakubox%
  \end{ascpsbox}}
\DeclareWakuFrame{wakui}{tail}{%
  \begin{ascpsbox}%
    {\innerleftskip,0.50\Vokuri,\innerrightskip,\innerbottomskip}%
    [0.00,0.00,0.00,0.10]%
    {0.00mm,0.00mm,3.00mm,3.00mm}%
    [0.00,0.00,0.00,1.00]%
    {1.00mm,0.00mm,1.00mm,1.00mm}%
    \unvbox\Wakubox%
  \end{ascpsbox}}
//}

のように指定します。

  また、ここで作った囲み罫を使って、小組等に自動的に囲み罫を発生させることができます。
  \mkkogumiや\mkkajyouで作られた環境に対して、
//list{
\def\waku@〈環境名〉{\〈囲み罫名〉}
\def\endwaku@〈環境名〉{\end〈囲み罫名〉}
//}
のように宣言しておくと、その環境は自動的に囲み罫で囲まれます。
  kogumiという名前の小組を使用した場合にwakuiという囲み罫で囲む場合は
//list2{
\def\waku@kogumi{\wakui}
\def\endwaku@kogumi{\endwakui}
//}
のように宣言します。
  この場合は、kogumiという名前の小組を使用した場合にその小組はwakuiという名前の囲み罫で囲まれます。

//iiii //in619ルビ

  ルビを定義するには、次のマクロを使います。//in620

//list{
\newruby{〈名前〉}[〈揃え〉]{〈欧文書体名〉}{〈横和文書体名〉}{〈縦和文書体名〉}%
        {〈ルビ級数比率〉}[〈食い込み〉]{〈本文-ルビ空き〉}
//}

//k1{
//g{揃え//}
//|ルビ文字列をルビを付ける本文文字列のどこに揃えるかを指定します。
//table[l(2w)l]{
f	ルビ文字列の先頭と本文文字列の先頭を揃える
c	ルビ文字列の中心と本文文字列の中心を揃える
b	ルビ文字列の末尾と本文文字列の末尾を揃える
//}
//g{書体名//}
//|欧文書体名、縦／横和文書体名をTFM名で指定します。書体のTFM名はAppendix Dの書体一覧表を参照してください。
//g{ルビ級数比率//}
//|ルビとして出力する文字の大きさを、ルビを付ける本文文字の大きさを1.0として比率で指定します。
//g{食い込み//}
//|ルビ文字列がルビを付ける本文文字列より幅が大きい場合、前後の本文文字列にどこまで食い込ませるかを本文文字数で指定します。0であれば食い込ませず、はみ出したルビの分だけ前後の本文が離れることになります。
//g{本文-ルビ空き//}
//|ルビ文字列と本文文字列をどれだけ離すかを指定します。
//}

  たとえば、
//table[l(8w)]{
ルビ名	rubyi
揃え	中
欧文書体名	Times-Roman
横和文書体名	リュウミンL
縦和文書体名	リュウミンL
ルビ級数比率	0.5
食い込み	0.5文字
本文-ルビ空き	0.1文字
//}
のようなルビであれば、

//list2{
\newruby{rubyi}[c]{rptmr}{Ryumin-Light-H}{Ryumin-Light-V}{0.5}{0.5}{0.1zh}
//}

と指定します。

//iiii //in621傍点

  傍点を定義するには、次のマクロを使います。//in622

//list{
\newbouten{〈名前〉}{〈傍点文字〉}{〈書体名〉}%
          [〈傍点級数比率〉][〈本文-傍点空き〉][〈傍点位置補正〉]
//}

//k1{
//g{傍点文字//}
//|傍点として出力する文字を指定します。
//g{書体名//}
//|傍点書体名をTFM名で指定します。書体のTFM名はAppendix Dの書体一覧表を参照してください。
//g{傍点級数比率//}
//|傍点として出力する文字の大きさを、傍点を付ける本文文字の大きさを1.0として比率で指定します。
//g{本文-傍点空き//}
//|傍点と本文をどれだけ離すかを指定します。
//g{傍点位置補正//}
//|傍点と傍点を付ける本文文字は中心揃えになっています。傍点位置を左右にずらす場合、このパラメータを指定します。
//}

  たとえば、
//table[l(8w)]{
傍点名	bouteni
傍点文字	ヽ
傍点書体名	リュウミンL
傍点級数比率	0.7
本文-傍点空き	0.1文字
傍点位置補正	0.0文字
//}

のような傍点は、

//list2{
\newbouten{bouteni}{ヽ}{Ryumin-Light-H}[0.7][0.1zh][0.0zw]
//}

と指定します。
  また、このマクロを利用して//in623アンダーラインを発生させることもできます。

//list2{
\newbouten{uline}{\vrule width1.2zw height0.1mm depth0.0mm}{Ryumin-Light-H}[1.0]
[-1.1zh][0.0zw]
//}

のように傍点文字に\vruleを、本文-傍点空きにマイナスを指定すると、\uline{……}はアンダーラインとして機能することになります。

//iii //in624マクロ拡張の実例

  ここでは、いくつかのサンプルを示しながら、EWBの機能拡張を解説していきます。

//iiii //TeXによる組版処理の基本的な考え方

  サンプルを示す前に、まず//TeXの組版がどのように行われているのか、またどういった要素を基にして処理しているのかを簡単に説明しておきましょう。
  //TeXの組版処理は、“//in407ボックス”、“//in408グルー”、“//in409罫線”の3つを基本にして行われています。ボックスの大きさや要素はさまざまで、最小の単位が文字というボックスです。文字のボックスを横に並べたものが行のボックスで、行のボックスを縦方向に重ねたものがパラグラフのボックスとなります。そして、パラグラフとパラグラフを積み重ね、柱やノンブルのボックスを加えたものがページのボックスとなります。
  //TeXはボックスの形状（高さ、横幅、深さ）だけを基に、美しく見えるように並べたり重ねたりして組版しており、実際の文字や単語の意味は知りません。つまり、“a”や“g”という文字ボックスは、ボックスの形状が違うだけで、その中身の文字の形はまったく意味を持たないのです。組版時に参照するフォントにも、そのような情報しか記述されていません。
  また、作成するボックスの種類によって、縦か横のどちらか一方向にしか並べられないようになっています。行のボックスを作成している際には横方向にしか並べられず、パラグラフのボックスを作成している場合には、縦方向にしか重ねられません。そのため、任意のボックスを作成する際には、どちらの方向のボックスを作成しているのかをきちんと認識していなければなりません。
  さて、このボックス同士を並べたり重ねたりする際に、その間にグルーと呼ばれる伸び縮み自由な糊を付け加えることができます。このグルーは縦／横方向に伸び縮みし、マイナス方向に縮むこともできます。このグルーを付け加えることによって、文字間や単語間のアキ調整を行い、また行ボックス間のアキ、すなわち行間のアキ調整を行っているのです。文字間のグルーは、参照するフォントによって適切なグルーが半自動的に挿入されます。また、行間やパラグラフの間は、それぞれ専用のパラメータを調整することで自由に変えられます。もちろん、意図的に縦横方向の空白を挿入することもできます。
  ボックスとグルーの関係は、ちょうど左官屋さんがセメントを使ってレンガのブロックを重ね合わせてブロック塀を組み上げて行くのと似ています。セメントをグルー、レンガをボックスと考えればわかりやすいでしょう（//f030205）。

//f030205 ボックスとグルー

  もう1つの要素である罫線は、ボックスの特殊なものに相当します。罫線にも高さ、幅、深さがあり、自由な長さ、太さの罫線を任意の場所に作成することができます。ただし、ボックス同様に、縦方向か横方向のどちらか一方向の罫線しか作成できないようになっています。
  この3つの要素が//TeXの組版処理の基本となります。そして、//TeXでは“ボックス”、“グルー”、“//in412罫線”は、それぞれ次の命令を使って表現します。
//table[l(12w)l(6w)l(6w)]{
//bkei
　	横方向	縦方向
//tkei
ボックスを作成する命令	\//in413hbox	\//in414vbox
罫線を作成する命令	\//in415hrule	\//in416vrule
グルーを挿入する命令	\//in417hskip、\//in418hss	\//in419vskip、\//in420vss
//bkei
//}

  それでは、実際にマクロを作成してEWBを機能拡張するサンプルを説明してみましょう。ここにあげるサンプルはあくまでも例題ですので、その実現方法は他にいくつもあります。なお、ここでは、

//k1{
・マクロの作成方法
・トリガの定義方法
//}

の2段階に分けて解説します。作成したマクロ用のトリガは、体裁入力エディタで自動的に作成される“triger.diff”に追加するようにしてください。また、作成したマクロは必ず“diff.sty”という名前のファイルを作成して追加してください。

//iiii サンプル1　T型の罫線

  まず最初に、特殊な罫線を本文中に引くマクロを考えてみましょう。ここでは、次のような罫線を自由な位置に引くものとします。

//ZUHAN{0mm,0mm,40,l,FIG/ff030203.eps//}

  罫線の太さはいずれも“1H”、左右の縦罫は上下がそれぞれ“20H”とします。

//g{説明図//}
//ZUHAN{0mm,0mm,40,l,FIG/ff030204.eps//}


//iiiii マクロ解説

  罫線は“\//in421hrule”もしくは“\//in422vrule”命令を使って引きます。この“\[hv]rule”命令には引数があり、罫線の幅、高さ、深さを指定します。形式としては、次のように記述します。

//list{
\[hv]rule width〈横幅〉 height〈高さ〉 depth〈深さ〉
//}

  値は単位を付けて指定します。単位としては、“mm（ミリ）”や“cm（センチ）”、“pt（ポイント）”などが書け、さらに“H（歯）”や“Q（級数）”も指定できます。また、版面の縦横サイズは、それぞれ縦を“\//in423textheight”、横を“\//in424textwidth”という変数で表すことができます。たとえば、版面の横幅一杯に罫線を引く場合には、この変数を使って

//list2{
\hrule width\textwidth …
//}

という指定ができます。“\hrule”、“\vrule”はともに罫線を引くマクロですが、それぞれ横方向の罫線と縦方向の罫線を表します。どちらの方向の罫線を作成したいかによって選択します。
  この罫線を組み合わせれば、作成したいT型の罫線が作成できます。たとえば、左右に引かれている縦の罫線は、幅“1H”、高さ“20H”、深さ“20H”であるため、

//list2{
\vrule width1H height20H depth20H
//}

という指定になります。これを左右に書いて、その罫線の間に版面一杯の罫線を引けば、望みの罫線が出来上がるわけです。

//list2{
\vrule width1H         height20H depth20H //cmt{.....縦の罫//}
\vrule width\textwidth height1H  depth0pt //cmt{.....横の罫//}
\vrule width1H         height20H depth20H //cmt{.....縦の罫//}
//}
  ただし、このやり方では不備な点が1つあります。このマクロを使うと、//TeXが“//g{Overfull//}”という警告メッセージを表示してしまいます。この理由は、“\textwidth”一杯に引いている罫線の横に、さらに幅“1H”ずつの罫線を左右に引いているため、“2H”だけ版面を飛び出してしまっているからです。そのため、実際には版面一杯の罫線ではなく、“\textwidth - 2H”というサイズの罫線を引かなければなりません。
  版面の横幅は字詰めや字送りによってわかるため、たとえば13Q、25字詰め、べた送りならば13Q×25W−2H＝323Hとして、横幅から“2H”差し引いた値を計算して罫線を引けばいいのです。しかし、このやり方では、版面の大きさが変更になったりすると、この計算を再び、やり直さなければなりません。そこで、版面のサイズを変数に代入しておき、計算自体を//TeXに行わせるようにすれば、融通性の効くマクロになります。寸法用の変数を定義して、その変数に横幅を代入し、はみでている“2H”を引くようにするのです。このようにすれば、横幅が変っても、横幅の変数の値が自動的に変るため、マクロを変更する必要がなくなるわけです。
  では次に、寸法用変数の定義や計算の仕方について簡単に説明します。まず、寸法用の変数を定義するには、“\//in425newdimen”命令を使います。次のように記述します。

//list{
\newdimen\変数名
//}

  これで、“\変数名”という寸法が定義できます。定義した変数に値を代入するには、

//list{
\変数名=寸法
//}

とするだけです。たとえば、“\tmpdimen”という変数を定義し、“2H”という値を代入するには、

//list2{
\newdimen\tmpdimen  //cmt{.....変数を定義し、//}
\tmpdimen=2H  //cmt{...........値を代入する//}
//}

とします。また定数だけでなく寸法用の変数も右辺に指定できるため、たとえば版面の縦サイズを代入するには、

//list2{
\tmpdimen=\textheight
//}

という指定もできます。もちろん、定義した変数と組み込みの寸法用変数には何の違いもありません。寸法を記述できる場所に対して自由に使えます。
  次に、足し算と引き算ですが、残念ながら//TeXには足し算の命令しかありません。そのため、引き算は足し合わせる値をマイナスにすることで実現します。
足し算は、//in426

//list{
\advance\変数 by 値
//}

という命令を使って計算させます。計算結果は、“\変数”に代入されます。すなわち、Cのようなプログラミング言語で”//tt{i = i + 5;//}”と記述するのと同じことになります。たとえば、“\a”という変数に“10mm”を代入し、それに“2H”加えるには、次のように行います。

//list2{
\newdimen\a  //cmt{............変数を定義して、//}
\a=10mm  //cmt{................値を設定して、//}
\advance\a by 2H  //cmt{.......次に計算を行う//}
//}

  これで、“\a”には“10mm + 2H”、すなわち“10.5mm”が代入されます。
  さてこれで、変数の定義方法、値の計算方法がわかりました。最終的なマクロ定義は、次のようになります。“diff.sty”という名前のファイルを作成し、次のマクロを記述しておいてください。

//list2{
\newdimen\tmpdimen

\def\Tbackrule{%
\tmpdimen=\textwidth \advance\tmpdimen by-2H  //cmt{....幅を計算する//}
\par   //cmt{...........................................段落に分けるため//}
\noindent   //cmt{......................................インデントしない//}
  \vrule width1H        height20H depth20H    //cmt{....縦罫を引く//}
  \vrule width\tmpdimen height1H  depth0pt    //cmt{....横罫を引く//}
  \vrule width1H        height20H depth20H    //cmt{....縦罫を引く//}
\par}
//}

//iiiii トリガ定義

  マクロの作成はこれで終りですが、次にEWBで利用できるようにトリガを定義しなければなりません。トリガの追加／修正は、“triger.diff”ファイルに対して行います。
“triger.diff”ファイルの最後に、次の1行を追加してください。

//list2{
defsimple trule	"\\Tbackrule"
//}

  “////trule”という名前の単純トリガを追加したことになります。この単純トリガは“\Tbackrule”に展開されます。
  試しに、次のようなEWBのファイルを作成して実際に処理してみましょう。

//list2{
□□□□□□□□□□□
////trule
□□□□□□□□□□□
//}

//iiii サンプル2　縦罫付き見出し

  サンプル1に示した罫線を応用して、文字列と罫線を組み合わせた見出しを作成してみましょう。

//ZUHAN{0mm,0mm,60,l,FIG/ff030205.eps//}

//g{説明図//}
//ZUHAN{0mm,0mm,60,l,FIG/ff030206.eps//}


//iiiii マクロ解説

  ボックスを作るには“\//in427hbox”と“\//in428vbox”という命令があります。“\hbox”は横方向に組み合わせられるボックス、“\vbox”は縦方向に組み合わせられるボックスを表しています。“\[hv]box”には、それぞれどのくらいの横幅や高さのボックスを作るのかということを、オプションで指定することができます。
//list{
\hbox to 寸法{…}
\vbox to 寸法{…}
//}
  また、縦横の寸法を指定するもう1つの方法として、“\//in429hsize”と“\//in430vsize”を使うやり方があります。ボックスの中、つまり“{}”で囲まれた中に“\hsize”や“\vsize”を指定すると、そのボックスの横と高さを任意に指定できます。
  たとえば、
//list2{
\vbox{\hsize=横の寸法\vsize=縦の寸法
………
}
//}
とすると、指定した縦横サイズの“\vbox”が作れます。
  さて、このボックス命令と罫線を組み合わせれば、サンプルのような見出しを作ることができます。たとえば、次のように書くと罫線と横幅10cmの見出し文字列用のボックスを横に並べることができます。

//list2{
\hbox{%
\vrule width10H height10H depth0pt
\vbox{\hsize=10cm
………
}}
//}

  ただし、この指定では罫線の高さに定数を使っているため、一定の大きさに固定されてしまっています。そこで、一度テンポラリのボックスに文字列を挿入してボックスを組み立て、その後で、作成したボックスの高さを調べることによって、罫線の高さを決めるようにします。ボックスを表す変数は、
//list{
\newbox\ボックス
//}
という命令で作成できます。作成したボックスには、次の命令を用いて内容を設定できます。//in431
//list{
\setbox\ボックス=\[hb]box{…}
//}
  代入したボックスの内容を実際に組版させるには、次の命令を使います。//in432//in433
//list{
\box\ボックス　または　\copy\ボックス
//}
  このように入力すれば、ボックスの内容が取り出せます。
  また、“\//in434wd\ボックス”、“\//in435ht\ボックス”、“\//in436dp\ボックス”という命令で、それぞれボックスの“幅”、“高さ”、“深さ”を調べることができます。
//list{
\wd\ボックス //cmt{..........横幅を表す//}
\ht\ボックス //cmt{..........高さを表す//}
\dp\ボックス //cmt{..........深さを表す//}
//}
  これらの命令を組み合わせて、最終的なマクロ定義を行うと次のようになります。

//list2{
  \newbox\tmpbox
  \DeclareCompositFont{ruletitle}[0.0,0.0,0.0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{
OT1/ptm/m/n}[0.03zh]
  \newslip{ruletitle}{24H}{0H}{0H}{0H}

  \def\rulemidashi#1{%
  \setbox\tmpbox=\vbox{%
  \selectslipt{ruletitle} //cmt{........................スリップを設定//}
  \selectcomposit{ruletitle} //cmt{.....................フォントを設定//}
  #1}
  \hbox{%
    \vrule width10H height\ht\tmpbox depth0pt //cmt{....ボックスの高さ分の罫//}
    \hskip5H        //cmt{..............................罫線と見出し間のアキ//}
    \box\tmpbox}}
//}

  これでマクロとしては正しく作成できたのですが、このマクロを見出しトリガとして応用する場合には、さらにテクニックを使わなければなりません。
  見出しは、//LaTeXeでは“\chapter”、“\section”などといったマクロを用いて指定します。このマクロは内部で、//in437
//list{
\@make〜head#1#2
//}
という形式のマクロを呼び出すようになっています。“〜”には、対応するレベルの見出しを表すマクロ名、たとえば“chapter”や“section”などが当てはまります。
  仮に“\chapter”マクロを使った場合には、内部では“\@makechapterhead”マクロが呼び出され、実際の見出しが処理されます。このマクロを定義し直せば、新たにトリガを登録しなくとも、これまでの“////i〜////iiiii”で望みの見出しを出力することができます。
  なお、この“\@make〜head”マクロは、引数を2つ取るようになっています。最初の引数は、“第3章”のように、見出しに統一して出力される文字列や見出しの番号です。2番目の引数には、章ごとに変る見出しの内容です。
  このサンプルの見出しでは、章番号や章タイトルも一緒にして扱うため、次のように用いて、内部のマクロを定義し直すだけで動作させることができます。

//list2{
\def\@makechapterhead#1#2{%
  \rulemidashi{#1#2}
}
//}

  マクロを見出しとして利用する場合には、トリガを新しく登録する必要はありません。

//iiii サンプル3　囲み罫

  次に、囲み罫を考えてみましょう。
  囲み罫は\newkakomikeiマクロで作ることができますが、ここでは単純な罫線とボックスの組み合わせで見出しを囲む方法を説明します。

//ZUHAN{0mm,0mm,60,l,FIG/ff030207.eps//}

//g{説明図//}
//ZUHAN{0mm,0mm,60,l,FIG/ff030208.eps//}

//iiiii マクロ解説

  罫線を四角いボックスのように囲って出力するには、“\vbox”の中に、そのボックスの天地左右一杯に罫線を4本引けば実現できます。その際、利用する“\vbox”は次のように書きはじめます。

//list2{
\vbox{\parindent=0pt\offinterlineskip
………
}
//}

  “\//in438parindent”は段落インデントの大きさを表す変数です。“\//in439offinterlineskip”はマクロで、行間のアキをまったくなくす働きをします。そのため、この“\vbox”の中に書いたものは、インデントを行わず、また上下に隙間を空けずに並ぶことになります。
  次に、この中に罫線を四隅に寄せて引くのですが、ボックスの端まで寄せるにはグルーやアキを挿入しなければなりません（グルーとスペースは厳密には違う）。
文字間や行間に任意のアキを入れるには、次の命令を使います。//in440//in441
//list{
\hskip 値 //cmt{....横方向のアキ//}
\vskip 値 //cmt{....縦方向のアキ//}
//}
  このマクロを使って、アキの大きさを計算して指定すると、
//list2{
\newdimen\tmpdimen
\tmpdimen=\textwidth
\advance\tmpdimen by-2H //cmt{...............罫線の太さを幅から引く//}

\hbox to\textwidth{%
\vrule width1H depth0pt height60H
\hskip\tmpdimen   //cmt{.....................計算した値だけアキを挿入//}
\vrule width1H depth0pt height60H}
//}

という記述になります。これで横幅一杯にそれぞれの罫を寄せることができます。もちろん、これでもかまわないのですが、グルーには“\hss”と“\vss”という便利なものがあり、面倒な計算を行わずに、与えられた範囲一杯に伸び縮みさせることができます。//in442//in443
//list{
\hss //cmt{....横方向へ無限に伸び縮みするグルー//}
\vss //cmt{....縦方向へ無限に伸び縮みするグルー//}
//}
  この命令を使うと、先のマクロは次のように記述できます。

//list2{
\hbox to\textwidth{%
\vrule width1H depth0pt height60H
\hss
\vrule width1H depth0pt height60H}
//}

  この“\hbox”は縦の罫線を書いて、その間に無限に伸びる糊を置き、さらにその右側に最初と同じ縦罫線を引くという命令です。その結果、間の糊が無限に伸びるため、指定してある限界の“\textwidth”まで左右の罫線が押されることになり、版面の左右ぴったりに縦方向の罫線が引かれることになります。
  これを応用して、四角いボックス型に罫線を引くには、

//list2{
\vbox{\parindent=0pt\offinterlineskip
\hrule width\textwidth heigh1H depth0pt
\hbox to\textwidth{%
\vrule width1H height60H depth0pt
\hss
\vrule width1H height60H depth0pt}
\hrule width\textwidth heigh1H depth0pt}
//}

とすればよいことになります。
  さて、この箱の中に文字列を書いて、指定したサイズの天地左右中央に位置させるには、次のようなマクロを使います。

//list2{
……
\vrule ……
\hss\vbox to60H{\vss\hbox{#1}\vss}\hss
\vrule ……
……
//}

  左右中央に位置させるには対象文字列の左右に“\hss”を挿入し、天地中央に位置させるには上下に“\vss”を挿入すればいいのです。ただし、ここで1つポイントがあります。引数“#1“を余分な“\hbox”で囲っている点です。この“\hbox”を指定しないと、“\vbox”だけでは、デフォルトの横幅が版面一杯になってしまうため、左右の中央に位置させられなくなってしまうのです。
  この点を注意してマクロを記述すると、次のようになります。

//list2{
\def\kmakimidashi#1{%
\vbox{\parindent=0pt\offinterlineskip
\hrule width\textwidth height1H depth0pt
\hbox to\textwidth{%
\vrule width60H height1H depth0pt
\hss\vbox to60H{\vss\hbox{#1}\vss}\hss
\vrule width60H height1H depth0pt
\hrule width\textwidth height1H depth0pt}}
//}

  さて、これで囲み罫は作成できたのですが、もう少し手を加えてもっと融通の効くマクロに直してみましょう。このように作成したマクロでは、囲む罫線の大きさが固定されてしまいます。縦横のサイズを限定するのではなく、中に記述する文字列の大きさによって可変となるようにしてみましょう。
  これは、中身を一度テンポラリのボックスに代入し、その縦横を計ってから罫線を引けば実現できます。そのため、まずボックスに中身を代入するマクロを次のように記述します。

//list2{
\newbox\tmpbox

\def\kmakimidashi#1{%
\setbox\tmpbox=\vbox{\selectcomposit{…}\selectslip{…}
\leftskip=1\hokuri \rightskip=1\hokuri
\vskip1\vokuri #1 \vskip1\vokuri}
……
}
//}

  ここで、“\//in444leftskip”と“\//in445rightskip”という命令を使っています。これは、中にはいる文字列に対してぴったりの罫線を引くと、その文字列に罫線がくっついてしまうためで、“\leftskip”と“\rightskip”で左右を1文字ずつ空けているのです。同じように、上下も“\vskip”命令で1行ずつ空けてあります。もちろん、“\leftskip”と“\rightskip”命令を使わなくても、スリップを定義して利用すれば、同じ効果を得ることができます。
  次に、ボックスの高さと幅を調べて、その大きさの罫線を天地左右に引くマクロを作成します。これは、次のようになります。罫線の引き方は、前に説明したマクロと同じ方法です。単純に、罫線の寸法を変数に換えているだけです。

//list2{
\newdimen\tmpwd \tmpwd=\wd\tmpbox
\newdimen\tmpht \tmpht=\ht\tmpbox

\vbox{\parindent=0pt\offinterlineskip
\hrule width\tmpwd height1H depth0pt
\hbox to\tmpwd{%
\vrule width1H height\tmpht depth0pt
\hss
\vbox to\tmpht{\vss\hbox{\box\tmpbox}\vss}
\hss
\vrule width1H height\tmpht depth0pt}
\hrule width\tmpwd height1H depth0pt}}
//}

  このマクロを、先ほどのボックスを作成するマクロと一緒に定義すれば、罫囲みを行うことができます。

//list2{
\newbox\tmpbox
\newdimen\tmpwd \newdimen\tmpht

\DeclareCompositFont{kmaki}[0.0,0.0,0.0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{OT1/ptm/
m/n}[0.03zh]
\newslip{kmaki}{24H}{0H}{0H}{0H}

\def\kmakimidashi#1{%
\setbox\tmpbox=\vbox{\selectcomposit{kmaki}\selectslip{kmaki}
\leftskip=1\hokuri \rightskip=1\hokuri
\vskip1\vokuri #1 \vskip1\vokuri}
%
\tmpwd=\wd\tmpbox \tmpht=\ht\tmpbox
%
\vbox{\parindent=0pt\offinterlineskip
\hrule width\tmpwd height1H depth0pt
\hbox to\tmpwd{%
\vrule width1H height\tmpht depth0pt
\hss\vbox to\tmpht{\vss\hbox{\box\tmpbox}\vss}\hss
\vrule width1H height\tmpht depth0pt}
\hrule width\tmpwd height1H depth0pt}}
//}

//iiiii トリガ定義

  このマクロをトリガとして利用する場合には、いくつかの方法が考えられます。1つには、見出しに応用する方法、もう1つは、グループトリガとして利用する方法です。前者のように見出しとして登録する場合には、少しマクロを追加するだけで、トリガのファイルを修正する必要はありません。また、後者のようにグループトリガとして利用できるようにするには、次のようなトリガを追加しなければなりません。

//list2{
defgothic  kmidashi  "\\kmakimidashi{"  "}"
//}

  このように追加すれば、

//list{
□□□□□□□□□□□□□
////kmidashi{囲む文字列////}
□□□□□□□□□□□□□
//}

とEWBファイルを作って簡単に利用できます。

//iiii サンプル4　特殊罫

  罫線と文字列とを組み合せて、次のような文字列が付いた罫をサンプルとして作成してみましょう。

//ZUHAN{0mm,0mm,40,l,FIG/ff030211.eps//}

  罫で囲った文字列の両側は、それぞれ罫から“5H”ずつ空いているものとします。

//g{説明図//}
//ZUHAN{0mm,0mm,60,l,FIG/ff030212.eps//}

//iiiii マクロ解説

  特殊罫のサンプルは、これまでに説明した何パターンかの罫線の作成方法を組み合せれば、簡単に実現できます。
  ここでは、まず一時的なボックス変数に文字列を代入し、文字列を罫線で囲ったボックスを作成しておきます。次に、上側の長い罫線を引いて、その右端に作成しておいた罫囲みのボックスを出力するようにします。
  罫囲みのボックスは、これまでのサンプルで作成した命令を使って、次のように作成できます。

//list2{
\newbox\tmpbox
\newdimen\tmpwd
\newdimen\tmpht
\DeclareCompositFont{flagfont}[0.0,0.0,0.0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{OT1/
ptm/m/n}[0.03zh]

\def\flagrule#1{%
\setbox\tmpbox=\hbox{\selectcomposit{flagfont}\hskip5H#1\hskip5H}
%
\tmpwd=\wd\tmpbox \tmpht=\ht\tmpbox
%
\setbox\tmpbox=\vbox{\parindent=0pt\offinterlineskip
\hrule width\tmpwd height1H depth0pt
\hbox to\tmpwd{%
\vrule width1H height\tmpht depth0pt
\hss\vbox to\tmpht{\vss\hbox{\box\tmpbox}\vss}\hss
\vrule width1H height\tmpht depth0pt}
\hrule width\tmpwd height1H depth0pt}
……
}
//}

  さて、作成したボックスと横に長い罫線とを組み合せて出力する部分は、次のようになります。

//list2{
……
\vbox{\parindent=0pt\offinterlineskip
\hrule width\textwidth height1H depth0pt
\vskip-1H
\hbox to\textwidth{\hss\box\tmpbox}}}
//}

  まず横罫を引き、次に罫線の太さだけ上側に移動して、それから罫囲みしたボックスを版面の右詰めにして出力しています。この罫線とボックスとがページ替えで分かれてしまわないように、”//tt{\vbox//}”の中に代入し、行間のスペースを0ptにしています。
  最終的な特殊罫全体のマクロは、次のようになります。

//list2{
\newbox\tmpbox
\newdimen\tmpwd
\newdimen\tmpht
\DeclareCompositFont{flagfont}[0.0,0.0,0.0,1.0]{18Q}[17H]{JY1/mmc/m/n}[18Q]{OT1/
ptm/m/n}[0.03zh]

\def\flagrule#1{%
\setbox\tmpbox=\hbox{\selectcomposit{flagfont}\hskip5H#1\hskip5H}
%
\tmpwd=\wd\tmpbox \tmpht=\ht\tmpbox
%
\setbox\tmpbox=\vbox{\parindent=0pt\offinterlineskip
\hrule width\tmpwd height1H depth0pt
\hbox to\tmpwd{%
\vrule width1H height\tmpht depth0pt
\hss\vbox to\tmpht{\vss\hbox{\box\tmpbox}\vss}\hss
\vrule width1H  height\tmpht depth0pt}
\hrule width\tmpwd height1H depth0pt}
\vbox{\parindent=0pt\offinterlineskip
\hrule width\textwidth height1H depth0pt
\vskip-1H     //cmt{...................................罫線の太さだけマイナス//}
\hbox to\textwidth{\hss\box\tmpbox}}}
//}

//iiiii トリガ定義

  次に、この特殊罫のマクロをトリガに追加してみましょう。“triger.diff”ファイルに次のようなトリガ定義を追加します。

//list2{
defgothic  fgrule  "\\flagrule{"  "}"
//}

  これで、“////fgrule”というトリガが使えるようになります。原稿中に、

//list2{
□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□□□□□□
////fgrule{サンプル////}
□□□□□□□□□□□□□□□□□□□
□□□□□□□□□□□□□□□□□□□
//}

と記述すれば、その場所に特殊罫を引くことができます。

//ii //in518書体の追加

  EWBの標準状態では和文21書体、欧文約200書体が使用できますが、ここではさらに市販の書体や自分で作成した書体を追加する方法を説明します。

//iii //in519和文書体の追加

  和文書体の追加には //in520jfontadd というコマンドを使用します。
  和文フォントをEWBで扱えるようにするためにTFMとVFいうフォントデータを作成し、フォントとしてEWBシステムに登録します。
  このコマンドでフォントの実体がインストールされるわけではありません。実際に出力されるフォントは出力デバイスに依存します。
  コマンドの実行前に、EWBおよび//TeXのライブラリにデータを書き込むことができるように、su コマンドでroot アカウントになっておいてください。

//list{
jfontadd PSフォント名  VF用TFM名  ファミリ名  ウエイト
//}

//k1{
・//|PSフォント名は Ryumin-Light のようにフォント固有部分のみ、-RKSJ-H等はつけない
・//|VF用TFM名は ryumin-l のように区別できる適当な名前
・//|ファミリ名は rmn のように3〜4文字程度
・//|ウエイトは l,r,m,b,h,u のような太さを表す文字
//}

例として、「教科書ICA-M」を追加する場合を示します。

//list2{
jfontadd KyokaICA-Medium kyoka-m kyo m
//}

  これでEWBシステムで「教科書ICA-M」が使用できるようになります。
  実際に追加したフォントを使用する場合はpssted等を使ってスタイルファイル中でフォントを指定しておく必要があります。

//iiii ghostscriptの設定
 
  jfontadd は出力デバイス（ghostscriptおよびプリンタ）の調整は行いません。そのため、追加したフォントを使用したファイルをghostviewでプレビューした場合、ghostscriptが追加したフォントを和文フォントとして認識せず、文字化けしてしまいます。これを防ぐため、次のような設定が必要です。
  /usr/local/share/ghostscript/ 以下のディレクトリに pcf.ps または vflib.ps というファイルがあります。これらのファイルを書き換えます。
  vflib.psのファイル中に 
//list2{
                   :
/FutoMinA101-Bold       4320000 (min) VFlibkanji
/FutoGoB101-Bold        4320200 (goth) VFlibkanji
                〜中略〜 
/GothicMB101-Bold       4323600 (goth) VFlibkanji
/GothicMB101-Ult        4323800 (goth) VFlibkanji
                   :
//}
のような部分があるので、/GothicMB101-Ult…の直後に、次のような1行を追加します。
//list{
/<PSフォント名> <数値> (<minまたはgoth>) VFlibkanji
//}

<数値>は直前の行の数字に200を加えた値になります。たとえば次のようになります。
//list2{
/KyokaICA-Medium  4324000 (min) VFlibkanji
//}

  pcf.psについても同様です。
//list2{
                   :
/FutoGoB101-Bold  4320000 (/usr/X11R6/lib/X11/fonts/misc/k14.pcf) pcfkanji
/FutoMinA101-Bold 4320200 (/usr/X11R6/lib/X11/fonts/misc/jiskan24.pcf) pcfkanji
                〜中略〜 
/GothicMB101-Bold 4323600 (/usr/X11R6/lib/X11/fonts/misc/k14.pcf) pcfkanji
/GothicMB101-Ult  4323800 (/usr/X11R6/lib/X11/fonts/misc/k14.pcf) pcfkanji
                   :
//}
vflib.psの場合と同様に、/GothicMB101-Ult…の直後に、次のような1行を追加します。
//list{
/<PSフォント名> <数値> (<pcfファイル>) pcfkanji
//}
<数値>は直前の行の数字に200を加えた値になります。たとえば次のようになります。
//list2{
/KyokaICA-Medium  4324000 (/usr/X11R6/lib/X11/fonts/misc/jiskan24.pcf) pcfkanji
//}

//iiii //in521プリンタ代用フォントの設定

  使用したい和文フォントがプリンタにインストールされていない場合、代用フォントの設定が必要になります。
  /usr/local/ewb/3.3 にある //in522psfontalias というファイルで代用フォントを定義しておきます。
  psfontaliasの中身は

//list2{
Ryumin-regular-H        Ryumin-Light-H
Ryumin-regular-V        Ryumin-Light-V
Ryumin-Medium-H         Ryumin-Light-H
Ryumin-Medium-V         Ryumin-Light-V
              :
//}

のようになっており、各行は

//list{
  <置換されるフォント名>  <置換するフォント名>
//}

といった意味です。
  「教科書ICA-M」がEWBで使用できるようになったがプリンタにはインストールされていない、という場合は

//list2{
KyoukaICA-Medium-H       Ryumin-Light-H
KyoukaICA-Medium-V       Ryumin-Light-V
KyoukaICA-Medium-RKSJ-H       Ryumin-Light-RKSJ-H
KyoukaICA-Medium-RKSJ-V       Ryumin-Light-RKSJ-V
KyoukaICA-Medium-83pv-RKSJ-H       Ryumin-Light-83pv-RKSJ-H
//}

という行を追加しておけば文字化けすることなく代用フォントのリュウミン-Lで印刷されます。代用フォントはプリンタにインストールされている和文フォントであればなんでも構いません。
  複数のプリンタを使用している場合、この置換リストファイルは出力するプリンタ名で切り換えることができます。psfontaliasと同じディレクトリに

//list{
<プリンタ名>fontalias
//}

という名前（プリンタ名lpであればlpfontalias）で置換リストファイルを作り、EWBでの印刷時にプリンタを指定すれば印刷時に参照するファイルが切り替わります。

//iii //in523欧文書体の追加

  欧文書体の追加には //in524efontadd というコマンドを使用します。
  欧文フォントをEWBで扱えるようにするためにTFMというフォントデータを作成し、フォントとしてEWBシステムに登録します。
  このコマンドでフォントの実体がインストールされるわけではありません。実際に出力されるフォントは出力デバイスに依存します。
  TFM作成するためのデータとしてAFMという文字幅および高さを記述したファイルが必要です。AFMはPSフォントファイルを元にMacintosh上でFontographerというソフトを使って作成できます。
  コマンドの実行前に、EWBおよび//TeXのライブラリにデータを書き込むことができるように、su コマンドでroot アカウントになっておいてください。

//list{
efontadd PSフォント名  AFM名  ファミリ名  ウエイト シェイプ
//}

//k1{
・//|AFMファイルは必ず拡張子が.afmで、AFM名には拡張子を付けずに記述
・//|ファミリ名は tmr のように3〜4文字程度
・//|ウエイトは l,r,m,b のように太さを表す文字
・//|シェイプは it,sl,sc のように変形を表す文字。変形なしは n を記述
//}

  例として、timesitalic.afm を元に「Times-Italic」を追加する場合を示します。

//list2{
efontadd Times-Italic timesitalic tms m it
//}

  これでEWBシステムで「Times-Italic」が使用できるようになります（NFSS名ではOT1/tms/m/itになります）。
  実際に追加したフォントを使用する場合はpssted等を使ってスタイルファイル中でフォントを指定しておく必要があります。
